<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="sample">
	
	<select id="login" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT
			    EMPLOYEE_NUM,
				MEMBER_NAME,
			    EMAIL_ADDR,
			    TEAM_NAME,
			    POSITION
			FROM
			    T_MEMBER
			WHERE
				EMPLOYEE_NUM = #{USER} AND PASSWORD = #{PASSWORD}
		]]> 
	</select>
	
	<select id="selectMemberList" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT
				MEMBER_NUM,
			    EMPLOYEE_NUM,
			    MEMBER_NAME,
			    EMAIL_ADDR,
			    PASSWORD,
			    TEAM_NAME,
			    POSITION
			FROM
			    T_MEMBER
			ORDER BY MEMBER_NUM DESC
		]]>
	</select>
	
	<delete id="deleteMember" parameterType="hashmap">
		<![CDATA[
			DELETE FROM T_MEMBER
			WHERE 	EMPLOYEE_NUM = #{EMPLOYEE_NUM}
		]]>
	</delete>
	
	<insert id="insertMember" parameterType="hashmap">
		<![CDATA[
			INSERT INTO T_MEMBER
			(
				EMPLOYEE_NUM,
				MEMBER_NAME,
				EMAIL_ADDR,
				PASSWORD,
				TEAM_NAME,
				POSITION,
				WRITER,
				CREATE_DAY,
				UPDATE_DAY
			)
			VALUES
			(
				#{EMPLOYEE_NUM},
				#{MEMBER_NAME},
				#{EMAIL_ADDR},
				#{PASSWORD},
				#{TEAM_NAME},
				#{POSITION},
				#{WRITER},
				NOW(),
				NOW()
			)
		]]>
	</insert>
	
	<insert id="insertBudget" parameterType="hashmap">
		<![CDATA[
			INSERT INTO T_PROJECT_BUDGET_INFOR
			(
				PRJ_NUM,
				PRJ_NAME,
				CONTRACT_AMOUNT,
				PRODUCT_AMOUNT,
				PRODUCT_SUM,
				CUST_SUM,
				RESULT_AMOUNT,
				OUTSOURCING_COST,
				O_CAMERA_RENTAL,
				O_EQUIPMENT_COST,
				O_MAKEUP_FEE,
				O_STARRING_FEE,
				O_AUTHOR_FEE,
				O_POST_PRODUCT_FEE,
				O_RECORD_FEE,
				O_VOICE_ACTOR_FEE,
				O_TRANSLATION_FEE,
				O_PURCHASE_MATERIALS,
				O_PLACE_RENTAL,
				O_BUY_ART_ACCESSORIES,
				O_ART,
				O_OVERSEAS_PHOTOGRAPHY,
				O_TRANSLATION_INSPECTION,
				O_TRANSLATION,
				O_DELIVERY_FEE,
				O_ETC,
				PROGRESS_COST,
				P_FOOD_EXPENSES,
				P_FUEL_COST,
				P_TRANSPORTATION_COST,
				P_ACCOMMODATION_COST,
				P_SNACK_COST,
				P_PARKING_FEE,
				P_PURCHASE_OFFICE_SUPPLIES,
				P_EQUIPMENT_RENTAL,
				P_ETC,
				P_CASH_USAGE,
				INTERNAL_COST,
				I_CAR_RENTAL,
				I_PHOTOGRAPHY_1_TEAM,
				I_PHOTOGRAPHY_2_TEAM,
				I_AERIAL_PHOTOGRAPHY_TEAM,
				I_AUTHOR_TEAM,
				I_DESIGN_TEAM,
				WRITER,
				CREATE_DAY,
				UPDATE_DAY
			)
			VALUES
			(
				#{g_project_number},
				#{g_project_name},
				#{g_contract_amount},
				#{g_product_amount},
				#{cbFormPreProductSum},
				#{cbFormPreCustSum},
				#{cbFormPreResultAmount},
				#{cbFormPreOutsourcingCost},
				#{cbFormPreOCameraRental},
				#{cbFormPreOEquipmentCost},
				#{cbFormPreOMakeupFee},
				#{cbFormPreOStarringFee},
				#{cbFormPreOAuthorFee},
				#{cbFormPreOPostProduct},
				#{cbFormPreORecordFee},
				#{cbFormPreOVoiceActorFee},
				#{cbFormPreOTranslationFee},
				#{cbFormPreOPurchaseMaterials},
				#{cbFormPreOPlaceRental},
				#{cbFormPreOBuyArtAccessories},
				#{cbFormPreOArt},
				#{cbFormPreOOverSeesPhotography},
				#{cbFormPreOTranslationInspection},
				#{cbFormPreOTranslation},
				#{cbFormPreODeliveryFee},
				#{cbFormPreOEtc},
				#{cbFormPreProgressCost},
				#{cbFormPrePFoodExpenses},
				#{cbFormPrePFuelCost},
				#{cbFormPrePTransportationCost},
				#{cbFormPrePAccommodationCost},
				#{cbFormPrePSnackCost},
				#{cbFormPrePParkingFee},
				#{cbFormPrePPurchaseOfficeSupplies},
				#{cbFormPrePEquipmentRental},
				#{cbFormPrePEtc},
				#{cbFormPrePCashUsage},
				#{cbFormPreInternalCost},
				#{cbFormPreICarRental},
				#{cbFormPreIPhotography1Team},
				#{cbFormPreIPhotography2Team},
				#{cbFormPreIAerialPhotographyTeam},
				#{cbFormPreIAuthorTeam},
				#{cbFormPreIDesignTeam},
				#{WRITER},
				NOW(),
				NOW()
			)
		]]>
	</insert>
	
	<update id="updateBudget" parameterType="hashmap">
		<![CDATA[
			UPDATE T_PROJECT_BUDGET_INFOR
			SET
				PRODUCT_SUM                     =#{cbFormPreProductSum},  
				CUST_SUM                           =#{cbFormPreCustSum},
				RESULT_AMOUNT                 =#{cbFormPreResultAmount},
				OUTSOURCING_COST           =#{cbFormPreOutsourcingCost},
				O_CAMERA_RENTAL              =#{cbFormPreOCameraRental},
				O_EQUIPMENT_COST             =#{cbFormPreOEquipmentCost},
				O_MAKEUP_FEE                   =#{cbFormPreOMakeupFee},
				O_STARRING_FEE                 =#{cbFormPreOStarringFee},
				O_AUTHOR_FEE                   =#{cbFormPreOAuthorFee},
				O_POST_PRODUCT_FEE             =#{cbFormPreOPostProduct},
				O_RECORD_FEE                   	=#{cbFormPreORecordFee},
				O_VOICE_ACTOR_FEE              =#{cbFormPreOVoiceActorFee},
				O_TRANSLATION_FEE              =#{cbFormPreOTranslationFee},
				O_PURCHASE_MATERIALS           =#{cbFormPreOPurchaseMaterials},
				O_PLACE_RENTAL                 		=#{cbFormPreOPlaceRental},
				O_BUY_ART_ACCESSORIES          =#{cbFormPreOBuyArtAccessories},
				O_ART                                   =	#{cbFormPreOArt},
				O_OVERSEAS_PHOTOGRAPHY         =#{cbFormPreOOverSeesPhotography},
				O_TRANSLATION_INSPECTION       =#{cbFormPreOTranslationInspection},
				O_TRANSLATION                  				=#{cbFormPreOTranslation},
				O_DELIVERY_FEE                 		=#{cbFormPreODeliveryFee},
				O_ETC                          						=#{cbFormPreOEtc},
				PROGRESS_COST                  				=#{cbFormPreProgressCost},
				P_FOOD_EXPENSES                		=#{cbFormPrePFoodExpenses},
				P_FUEL_COST                    			=#{cbFormPrePFuelCost},
				P_TRANSPORTATION_COST          =#{cbFormPrePTransportationCost},
				P_ACCOMMODATION_COST           =#{cbFormPrePAccommodationCost},
				P_SNACK_COST                   =#{cbFormPrePSnackCost},
				P_PARKING_FEE                  =#{cbFormPrePParkingFee},
				P_PURCHASE_OFFICE_SUPPLIES     =#{cbFormPrePPurchaseOfficeSupplies},
				P_EQUIPMENT_RENTAL             =#{cbFormPrePEquipmentRental},
				P_ETC                          =#{cbFormPrePEtc},
				P_CASH_USAGE                   =#{cbFormPrePCashUsage},
				INTERNAL_COST                  =#{cbFormPreInternalCost},
				I_CAR_RENTAL                   =#{cbFormPreICarRental},
				I_PHOTOGRAPHY_1_TEAM           =#{cbFormPreIPhotography1Team},
				I_PHOTOGRAPHY_2_TEAM           =	#{cbFormPreIPhotography2Team},
				I_AERIAL_PHOTOGRAPHY_TEAM      =#{cbFormPreIAerialPhotographyTeam},
				I_AUTHOR_TEAM                  =#{cbFormPreIAuthorTeam},
				I_DESIGN_TEAM                   =#{cbFormPreIDesignTeam},
				WRITER                               =#{WRITER},
				UPDATE_DAY                        = NOW()
			
			where prj_name = #{g_current_project_name}
		]]>
	</update>
	
	<select id="selectBudget" parameterType="hashmap" resultType="hashmap">
		select A.PRJ_NAME, A.PRODUCT_TEAM, A.CHARGE_PM, A.CHARGE_PD, A.CONTRACT_AMOUNT, A.PRODUCT_AMOUNT,
B.PRODUCT_SUM,
B.CUST_SUM,
B.RESULT_AMOUNT,
B.OUTSOURCING_COST,
B.O_CAMERA_RENTAL,
B.O_EQUIPMENT_COST,
B.O_MAKEUP_FEE,
B.O_STARRING_FEE,
B.O_AUTHOR_FEE,
B.O_POST_PRODUCT_FEE,
B.O_RECORD_FEE,
B.O_VOICE_ACTOR_FEE,
B.O_TRANSLATION_FEE,
B.O_PURCHASE_MATERIALS,
B.O_PLACE_RENTAL,
B.O_BUY_ART_ACCESSORIES,
B.O_ART,
B.O_OVERSEAS_PHOTOGRAPHY,
B.O_TRANSLATION_INSPECTION,
B.O_TRANSLATION,
B.O_DELIVERY_FEE,
B.O_ETC,
B.PROGRESS_COST,
B.P_FOOD_EXPENSES,
B.P_FUEL_COST,
B.P_TRANSPORTATION_COST,
B.P_ACCOMMODATION_COST,
B.P_SNACK_COST,
B.P_PARKING_FEE,
B.P_PURCHASE_OFFICE_SUPPLIES,
B.P_EQUIPMENT_RENTAL,
B.P_ETC,
B.P_CASH_USAGE,
B.INTERNAL_COST,
B.I_CAR_RENTAL,
B.I_PHOTOGRAPHY_1_TEAM,
B.I_PHOTOGRAPHY_2_TEAM,
B.I_AERIAL_PHOTOGRAPHY_TEAM,
B.I_AUTHOR_TEAM,
B.I_DESIGN_TEAM
from
(
select prj_num, prj_name, product_team, charge_pm, charge_pd, contract_amount, product_amount from t_project_making_infor
where prj_num = #{g_current_project_number}
) as A
INNER JOIN
(
select * from t_project_budget_infor
) AS B
ON A.prj_num=B.prj_num
	</select>
	
	<insert id="insertProject" parameterType="hashmap">
		<![CDATA[
			INSERT INTO T_PROJECT_MAKING_INFOR
			(
				PRJ_NAME,
				AGENCY,
				PRODUCT_TEAM,
				CHARGE_PM,
				CHARGE_PD,
				CONTRACT_START_DAY,
				CONTRACT_END_DAY_1,
				CONTRACT_END_DAY_2,
				CONTRACT_END_DAY_3,
				DELIVERY_CLOSE_DAY,
				ADMIN_CLOSE_DAY,
				PRJ_COLSE_DAY,
				STANDARD_YEAR,
				STANDARD_QUARTER,
				PRJ_STATUS,
				CONTRACT_AMOUNT,
				PRODUCT_AMOUNT,
				PREPAY_RATIO,
				PREPAY,
				MIDDLE_PAY_1,
				MIDDLE_PAY_2,
				MIDDLE_PAY_3,
				MIDDLE_PAY_4,
				BALANCE,
				USE_REG_SEAL,
				CUSTOM_PROPOSAL_1,
				CUSTOM_PROPOSAL_2,
				CUSTOM_CONTRACT_1,
				CUSTOM_CONTRACT_2,
				REMARK_1,
				REMARK_2,
				REMARK_3,
				REMARK_4,
				REMARK_5,
				NAGOTIATION,
				REPORT_PROGRESS,
				REPORT_RESULT,
				REPORT_SPECIAL,
				DELIVERY_PRODUCT,
				WRITER,
				CREATE_DAY,
				UPDATE_DAY
			)
			VALUES
			(
				#{cpFormPrjName, jdbcType=VARCHAR},
				#{cpFormAgency, jdbcType=VARCHAR},
				#{cpFormCteam, jdbcType=VARCHAR},
				#{cpFormPM, jdbcType=VARCHAR},
				#{cpFormPD, jdbcType=VARCHAR},
				#{cpFormStartDay, jdbcType=VARCHAR},
				#{cpFormContCompleteDay1, jdbcType=VARCHAR},
				#{cpFormContCompleteDay2, jdbcType=VARCHAR},
				#{cpFormContCompleteDay3, jdbcType=VARCHAR},
				#{cpFormDeliCompleteDay, jdbcType=VARCHAR},
				#{cpFormAdminCloseDay, jdbcType=VARCHAR},
				#{cpFormPrjCloseDay, jdbcType=VARCHAR},
				#{cpFormStandardYear, jdbcType=VARCHAR},
				#{cpFormStandardQuarter, jdbcType=VARCHAR},
				#{cpFormPrjStatus, jdbcType=VARCHAR},
				#{cpFormContrAmount, jdbcType=INTEGER},
				#{cpFormPrjAmount, jdbcType=INTEGER},
				#{cpFormPrePayRatio, jdbcType=INTEGER},
				#{cpFormPrePay, jdbcType=INTEGER},
				#{cpFormMidlePay1, jdbcType=INTEGER},
				#{cpFormMidlePay2, jdbcType=INTEGER},
				#{cpFormMidlePay3, jdbcType=INTEGER},
				#{cpFormMidlePay4, jdbcType=INTEGER},
				#{cpFormBalance, jdbcType=INTEGER},
				#{cpFormRegSeal, jdbcType=VARCHAR},
				#{cpFormCustomProposal1, jdbcType=VARCHAR},
				#{cpFormCustomProposal2, jdbcType=VARCHAR},
				#{cpFormCustomContractl1, jdbcType=VARCHAR},
				#{cpFormCustomContractl2, jdbcType=VARCHAR},
				#{cpFormRemark1, jdbcType=VARCHAR},
				#{cpFormRemark2, jdbcType=VARCHAR},
				#{cpFormRemark3, jdbcType=VARCHAR},
				#{cpFormRemark4, jdbcType=VARCHAR},
				#{cpFormRemark5, jdbcType=VARCHAR},
				#{cpFormNagotiation, jdbcType=VARCHAR},
				#{cpFormReportProgress, jdbcType=VARCHAR},
				#{cpFormReportResult, jdbcType=VARCHAR},
				#{cpFormReportSpecial, jdbcType=VARCHAR},
				#{cpFormDeliveryProduct, jdbcType=VARCHAR},
				#{WRITER, jdbcType=VARCHAR},
				NOW(),
				NOW()
			)
		]]>
	</insert>
	
	<update id="updateProject" parameterType="hashmap">
		<![CDATA[
			UPDATE T_PROJECT_MAKING_INFOR
			SET
				PRJ_NAME           = #{cpFormPrjName, jdbcType=VARCHAR}         ,  
				AGENCY             = #{cpFormAgency, jdbcType=VARCHAR}          ,  
				PRODUCT_TEAM       = #{cpFormCteam, jdbcType=VARCHAR}           ,  
				CHARGE_PM          = #{cpFormPM, jdbcType=VARCHAR}              ,  
				CHARGE_PD          = #{cpFormPD, jdbcType=VARCHAR}              ,  
				CONTRACT_START_DAY = #{cpFormStartDay, jdbcType=VARCHAR}        ,  
				CONTRACT_END_DAY_1 = #{cpFormContCompleteDay1, jdbcType=VARCHAR},  
				CONTRACT_END_DAY_2 = #{cpFormContCompleteDay2, jdbcType=VARCHAR},  
				CONTRACT_END_DAY_3 = #{cpFormContCompleteDay3, jdbcType=VARCHAR},  
				DELIVERY_CLOSE_DAY = #{cpFormDeliCompleteDay, jdbcType=VARCHAR} ,  
				ADMIN_CLOSE_DAY    = #{cpFormAdminCloseDay, jdbcType=VARCHAR}   ,  
				PRJ_COLSE_DAY      = #{cpFormPrjCloseDay, jdbcType=VARCHAR}     ,  
				STANDARD_YEAR      = #{cpFormStandardYear, jdbcType=VARCHAR}    ,  
				STANDARD_QUARTER   = #{cpFormStandardQuarter, jdbcType=VARCHAR} ,  
				PRJ_STATUS         = #{cpFormPrjStatus, jdbcType=VARCHAR}       ,  
				CONTRACT_AMOUNT    = #{cpFormContrAmount, jdbcType=INTEGER}     ,  
				PRODUCT_AMOUNT     = #{cpFormPrjAmount, jdbcType=INTEGER}       ,  
				PREPAY_RATIO       = #{cpFormPrePayRatio, jdbcType=INTEGER}     ,  
				PREPAY             = #{cpFormPrePay, jdbcType=INTEGER}          ,  
				MIDDLE_PAY_1       = #{cpFormMidlePay1, jdbcType=INTEGER}       ,  
				MIDDLE_PAY_2       = #{cpFormMidlePay2, jdbcType=INTEGER}       ,  
				MIDDLE_PAY_3       = #{cpFormMidlePay3, jdbcType=INTEGER}       ,  
				MIDDLE_PAY_4       = #{cpFormMidlePay4, jdbcType=INTEGER}       ,  
				BALANCE            = #{cpFormBalance, jdbcType=INTEGER}         ,  
				USE_REG_SEAL       = #{cpFormRegSeal, jdbcType=VARCHAR}         ,  
				CUSTOM_PROPOSAL_1  = #{cpFormCustomProposal1, jdbcType=VARCHAR} ,  
				CUSTOM_PROPOSAL_2  = #{cpFormCustomProposal2, jdbcType=VARCHAR} ,  
				CUSTOM_CONTRACT_1  = #{cpFormCustomContractl1, jdbcType=VARCHAR},  
				CUSTOM_CONTRACT_2  = #{cpFormCustomContractl2, jdbcType=VARCHAR},  
				REMARK_1           = #{cpFormRemark1, jdbcType=VARCHAR}         ,
				REMARK_2           = #{cpFormRemark2, jdbcType=VARCHAR}         ,
				REMARK_3           = #{cpFormRemark3, jdbcType=VARCHAR}         ,
				REMARK_4           = #{cpFormRemark4, jdbcType=VARCHAR}         ,
				REMARK_5           = #{cpFormRemark5, jdbcType=VARCHAR}         ,
				NAGOTIATION        = #{cpFormNagotiation, jdbcType=VARCHAR}     ,  
				REPORT_PROGRESS    = #{cpFormReportProgress, jdbcType=VARCHAR}  ,  
				REPORT_RESULT      = #{cpFormReportResult, jdbcType=VARCHAR}    ,  
				REPORT_SPECIAL     = #{cpFormReportSpecial, jdbcType=VARCHAR}   ,  
				DELIVERY_PRODUCT   = #{cpFormDeliveryProduct, jdbcType=VARCHAR} ,
				WRITER             = #{WRITER, jdbcType=VARCHAR}                ,  
				UPDATE_DAY         = NOW()
			
			where prj_num = #{g_current_project_number}
			
		]]>
	</update>
	
	<insert id="insertFileProject" parameterType="hashmap">
		<![CDATA[
			INSERT INTO T_PROJECT_FILE
			(
				PRJ_NUM,
				ORIGINAL_FILE_NAME,
				STORAGE_FILE_NAME,
				FILE_SIZE,
				IS_DELETE,
				WRITER,
				CREATE_DAY
			)
			VALUES
			(
				#{PRJ_NUM},
				#{ORIGINAL_FILE_NAME},
				#{STORAGE_FILE_NAME},
				#{FILE_SIZE},
				'N',
				#{WRITER},
				NOW()
			)
		]]>
	</insert>
	
	<select id="selectProjectFiles" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			select file_num, prj_num, original_file_name, storage_file_name, file_size, is_delete from t_project_file
where prj_num = #{g_current_project_number}
and is_delete = 'N'
		]]>
	</select>
	
	<update id="deleteFileUpdate" parameterType="hashmap">
		<![CDATA[
			update t_project_file 
			set is_delete = 'Y' 
			WHERE 
				file_num = #{dataFileNum}
		]]>
	</update>
	
	<select id="selectProject" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			select 
PRJ_NAME,
AGENCY,
PRODUCT_TEAM,
CHARGE_PM,
CHARGE_PD,
DATE_FORMAT(CONTRACT_START_DAY, '%Y%m%d') as CONTRACT_START_DAY,
DATE_FORMAT(CONTRACT_END_DAY_1, '%Y%m%d') as CONTRACT_END_DAY_1,
DATE_FORMAT(CONTRACT_END_DAY_2, '%Y%m%d') as CONTRACT_END_DAY_2,
DATE_FORMAT(CONTRACT_END_DAY_3, '%Y%m%d') as CONTRACT_END_DAY_3,
DATE_FORMAT(DELIVERY_CLOSE_DAY, '%Y%m%d') as DELIVERY_CLOSE_DAY,
DATE_FORMAT(ADMIN_CLOSE_DAY, '%Y%m%d') as ADMIN_CLOSE_DAY,
DATE_FORMAT(PRJ_COLSE_DAY, '%Y%m%d') as PRJ_COLSE_DAY,
STANDARD_YEAR,
STANDARD_QUARTER,
PRJ_STATUS,
ifnull(CONTRACT_AMOUNT, 0) as CONTRACT_AMOUNT,
ifnull(PRODUCT_AMOUNT, 0) as PRODUCT_AMOUNT,
ifnull(PREPAY_RATIO, 0) as PREPAY_RATIO,
ifnull(PREPAY, 0) as PREPAY,
ifnull(MIDDLE_PAY_1, 0) as MIDDLE_PAY_1,
ifnull(MIDDLE_PAY_2, 0) as MIDDLE_PAY_2,
ifnull(MIDDLE_PAY_3, 0) as MIDDLE_PAY_3,
ifnull(MIDDLE_PAY_4, 0) as MIDDLE_PAY_4,
ifnull(BALANCE, 0) as BALANCE,
USE_REG_SEAL,
CUSTOM_PROPOSAL_1,
CUSTOM_PROPOSAL_2,
CUSTOM_CONTRACT_1,
CUSTOM_CONTRACT_2,
REMARK_1,
REMARK_2,
REMARK_3,
REMARK_4,
REMARK_5,
NAGOTIATION,
REPORT_PROGRESS,
REPORT_RESULT,
REPORT_SPECIAL,
DELIVERY_PRODUCT
from t_project_making_infor
where prj_num = #{g_current_project_number}
		]]>
	</select>
	
	<select id="selectProjectNumber" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT
				PRJ_NUM
			FROM
				T_PROJECT_MAKING_INFOR
			WHERE
				PRJ_NAME = #{PRJ_NAME}		
		]]>
	</select>
	
	<select id="selectBoardList" parameterType="hashmap" resultType="hashmap">
<!-- 		<include refid="common.pagingPre"/>  -->
		<![CDATA[
			SELECT
				IDX,
			    IDX,
			    TITLE,
			    HIT_CNT,
			    DATE_FORMAT(CREATE_DTM, '%Y-%m-%d %h:%i %p') AS CREATE_DTM
			FROM
			    TB_BOARD
			WHERE
				DEL_GB = 'N'
		]]>
<!-- 		<include refid="common.pagingPost"/>  -->
	</select>
	
	<select id="selectPerformanceFirstTotal" parameterType="hashmap" resultType="hashmap">
			select A.product_team as product_team, ifnull(A.totalProject, "0") as totalProject, ifnull(B.completeProject, "0") as completeProject, ifnull(C.ingProject, "0") as ingProject
			from
			(
			select '전체' as product_team, count(prj_name) as totalProject  from t_project_making_infor 
			where standard_year = #{STANDARD_YEAR}
			<if test="STANDARD_QUARTER != null and !STANDARD_QUARTER.equals('전체')">
			and standard_quarter = #{STANDARD_QUARTER} 
			</if>
			union 
			select product_team, count(prj_name) as totalProject from t_project_making_infor 
			where standard_year = #{STANDARD_YEAR}
			<if test="STANDARD_QUARTER != null and !STANDARD_QUARTER.equals('전체')">
			and standard_quarter = #{STANDARD_QUARTER} 
			</if>
			 group by product_team
			 ) as A
			 LEFT OUTER JOIN
			 (
			select '전체' as product_team, count(prj_name) as completeProject  from t_project_making_infor 
			where standard_year = #{STANDARD_YEAR}
			<if test="STANDARD_QUARTER != null and !STANDARD_QUARTER.equals('전체')">
			and standard_quarter = #{STANDARD_QUARTER} 
			</if>
			 and prj_status = 'project_close'
			union
			select product_team, count(prj_name) as completeProject from t_project_making_infor 
			where standard_year = #{STANDARD_YEAR}
			<if test="STANDARD_QUARTER != null and !STANDARD_QUARTER.equals('전체')">
			and standard_quarter = #{STANDARD_QUARTER} 
			</if> 
			 and prj_status = 'project_close'
			 group by product_team
			 ) as B
			 ON A.product_team=B.product_team
			 LEFT OUTER JOIN
			 (
			select '전체' as product_team, count(prj_name) as ingProject  from t_project_making_infor 
			where standard_year = #{STANDARD_YEAR}
			<if test="STANDARD_QUARTER != null and !STANDARD_QUARTER.equals('전체')">
			and standard_quarter = #{STANDARD_QUARTER} 
			</if> 
			 and prj_status != 'project_close'
			union
			select product_team, count(prj_name) as ingProject from t_project_making_infor 
			where standard_year = #{STANDARD_YEAR}
			<if test="STANDARD_QUARTER != null and !STANDARD_QUARTER.equals('전체')">
			and standard_quarter = #{STANDARD_QUARTER} 
			</if> 
			 and prj_status != 'project_close'
			 group by product_team
			) as C
			ON A.product_team=C.product_team       
	</select>
	
	<select id="selectPerformanceFirst" parameterType="hashmap" resultType="hashmap">
			select A.product_team as product_team, ifnull(A.totalProject, "0") as totalProject, ifnull(B.completeProject, "0") as completeProject, ifnull(C.ingProject, "0") as ingProject
			from
			(
			select product_team, count(prj_name) as totalProject from t_project_making_infor 
			where standard_year = #{STANDARD_YEAR}
			<if test="STANDARD_QUARTER != null and !STANDARD_QUARTER.equals('전체')">
			and standard_quarter = #{STANDARD_QUARTER} 
			</if>
			and product_team = #{PRODUCT_TEAM}
			 group by product_team
			 ) as A
			 LEFT OUTER JOIN
			 (
			select product_team, count(prj_name) as completeProject from t_project_making_infor 
			where standard_year = #{STANDARD_YEAR}
			<if test="STANDARD_QUARTER != null and !STANDARD_QUARTER.equals('전체')">
			and standard_quarter = #{STANDARD_QUARTER} 
			</if> 
			and product_team = #{PRODUCT_TEAM}
			 and prj_status = 'project_close'
			 group by product_team
			 ) as B
			 ON A.product_team=B.product_team
			 LEFT OUTER JOIN
			 (
			select product_team, count(prj_name) as ingProject from t_project_making_infor 
			where standard_year = #{STANDARD_YEAR}
			<if test="STANDARD_QUARTER != null and !STANDARD_QUARTER.equals('전체')">
			and standard_quarter = #{STANDARD_QUARTER} 
			</if>
			and product_team = #{PRODUCT_TEAM} 
			 and prj_status != 'project_close'
			 group by product_team
			) as C
			ON A.product_team=C.product_team       
	</select>
	
	<select id="selectPerformanceSecondTotal" parameterType="hashmap" resultType="hashmap">
		select '전체' as product_team, format(ifnull(sum(E.contract_amount),0),0) as contract_amount, format(ifnull(sum(E.product_amount),0),0) as product_amount, format(ifnull(sum(E.result_amount),0),0) as result_amount, format(ifnull(sum(E.last_result_amount),0),0) as last_result_amount, ifnull(avg(E.lastRatio),0) as lastRatio
		from
		(
		
		select D.product_team, sum(D.contract_amount) as contract_amount, sum(D.product_amount) as product_amount, ifnull(sum(D.result_amount),0) as result_amount , sum(D.last_result_amount) as last_result_amount , avg(D.lastRatio) as lastRatio
		from
		(
		
		select A.prj_name,  A.product_team, A.contract_amount, A.product_amount, B.result_amount, C.amount_used, 
		(A.contract_amount - ifnull(C.amount_used, 0)) as last_result_amount, (A.contract_amount - ifnull(C.amount_used, 0))/A.contract_amount*100 as lastRatio
		from 
		(
		select * from t_project_making_infor 
		where standard_year = #{STANDARD_YEAR}
		<if test="STANDARD_QUARTER != null and !STANDARD_QUARTER.equals('전체')">
		and standard_quarter = #{STANDARD_QUARTER} 
		</if>
		 and prj_status = 'project_close'
		) A
		
		LEFT OUTER JOIN  
		t_project_budget_infor  B 
		ON A.prj_num=B.prj_num
		LEFT OUTER JOIN
		(
			select prj_num, sum(amount_used) as amount_used
			from
			t_cost
			group by  prj_num
		    
		) AS C
		ON A.prj_num=C.prj_num
		
		) AS D
		group by D.product_team
		
		) AS E
		
		union 
		
		select D.product_team, format(sum(D.contract_amount),0) as contract_amount, format(sum(D.product_amount),0) as product_amount, format(ifnull(sum(D.result_amount),0),0) as result_amount , format(sum(D.last_result_amount),0) as last_result_amount , avg(D.lastRatio) as lastRatio
		from
		(
		
		select A.prj_name,  A.product_team, A.contract_amount, A.product_amount, B.result_amount, C.amount_used, 
		(A.contract_amount - ifnull(C.amount_used, 0)) as last_result_amount, (A.contract_amount - ifnull(C.amount_used, 0))/A.contract_amount*100 as lastRatio
		from 
		(
		select * from t_project_making_infor 
		where standard_year = #{STANDARD_YEAR}
		<if test="STANDARD_QUARTER != null and !STANDARD_QUARTER.equals('전체')">
		and standard_quarter = #{STANDARD_QUARTER} 
		</if>
		 and prj_status = 'project_close'
		) A
		
		LEFT OUTER JOIN  
		t_project_budget_infor  B 
		ON A.prj_num=B.prj_num
		LEFT OUTER JOIN
		(
			select prj_num, sum(amount_used) as amount_used
			from
			t_cost
			group by  prj_num
		    
		) AS C
		ON A.prj_num=C.prj_num
		
		) AS D
		group by D.product_team
	</select>
	
	<select id="selectPerformanceThirdTotal" parameterType="hashmap" resultType="hashmap">
		select '전체' as product_team, format(ifnull(sum(E.contract_amount),0),0) as contract_amount, format(ifnull(sum(E.product_amount),0),0) as product_amount, format(ifnull(sum(E.result_amount),0),0) as result_amount, format(ifnull(sum(E.last_result_amount),0),0) as last_result_amount, ifnull(avg(E.lastRatio),0) as lastRatio
		from
		(
		
		select D.product_team, sum(D.contract_amount) as contract_amount, sum(D.product_amount) as product_amount, ifnull(sum(D.result_amount),0) as result_amount , sum(D.last_result_amount) as last_result_amount , avg(D.lastRatio) as lastRatio
		from
		(
		
		select A.prj_name,  A.product_team, A.contract_amount, A.product_amount, B.result_amount, C.amount_used, 
		(A.contract_amount - ifnull(C.amount_used, 0)) as last_result_amount, (A.contract_amount - ifnull(C.amount_used, 0))/A.contract_amount*100 as lastRatio
		from 
		(
		select * from t_project_making_infor 
		where standard_year = #{STANDARD_YEAR}
		<if test="STANDARD_QUARTER != null and !STANDARD_QUARTER.equals('전체')">
		and standard_quarter = #{STANDARD_QUARTER} 
		</if>
		 and prj_status != 'project_close'
		) A
		
		LEFT OUTER JOIN  
		t_project_budget_infor  B 
		ON A.prj_num=B.prj_num
		LEFT OUTER JOIN
		(
			select prj_num, sum(amount_used) as amount_used
			from
			t_cost
			group by  prj_num
		    
		) AS C
		ON A.prj_num=C.prj_num
		
		) AS D
		group by D.product_team
		
		) AS E
		
		union 
		
		select D.product_team, format(sum(D.contract_amount),0) as contract_amount, format(sum(D.product_amount),0) as product_amount, format(ifnull(sum(D.result_amount),0),0) as result_amount , format(sum(D.last_result_amount),0) as last_result_amount , avg(D.lastRatio) as lastRatio
		from
		(
		
		select A.prj_name,  A.product_team, A.contract_amount, A.product_amount, B.result_amount, C.amount_used, 
		(A.contract_amount - ifnull(C.amount_used, 0)) as last_result_amount, (A.contract_amount - ifnull(C.amount_used, 0))/A.contract_amount*100 as lastRatio
		from 
		(
		select * from t_project_making_infor 
		where standard_year = #{STANDARD_YEAR}
		<if test="STANDARD_QUARTER != null and !STANDARD_QUARTER.equals('전체')">
		and standard_quarter = #{STANDARD_QUARTER} 
		</if>
		 and prj_status != 'project_close'
		) A
		
		LEFT OUTER JOIN  
		t_project_budget_infor  B 
		ON A.prj_num=B.prj_num
		LEFT OUTER JOIN
		(
			select prj_num, sum(amount_used) as amount_used
			from
			t_cost
			group by  prj_num
		    
		) AS C
		ON A.prj_num=C.prj_num
		
		) AS D
		group by D.product_team
	</select>
	
	<select id="selectPerformanceSecond" parameterType="hashmap" resultType="hashmap">
select D.product_team, format(sum(D.contract_amount),0) as contract_amount, format(sum(D.product_amount),0) as product_amount, format(ifnull(sum(D.result_amount),0),0) as result_amount , format(sum(D.last_result_amount),0) as last_result_amount , avg(D.lastRatio) as lastRatio
from
(

select A.prj_name,  A.product_team, A.contract_amount, A.product_amount, B.result_amount, C.amount_used, 
(A.contract_amount - ifnull(C.amount_used, 0)) as last_result_amount, (A.contract_amount - ifnull(C.amount_used, 0))/A.contract_amount*100 as lastRatio
from 
(
select * from t_project_making_infor 
where standard_year = #{STANDARD_YEAR}
<if test="STANDARD_QUARTER != null and !STANDARD_QUARTER.equals('전체')">
and standard_quarter = #{STANDARD_QUARTER} 
</if>
and product_team = #{PRODUCT_TEAM}
 and prj_status = 'project_close'
) A

LEFT OUTER JOIN  
t_project_budget_infor  B 
ON A.prj_num=B.prj_num
LEFT OUTER JOIN
(
	select prj_num, sum(amount_used) as amount_used
	from
	t_cost
	group by  prj_num
    
) AS C
ON A.prj_num=C.prj_num

) AS D
group by D.product_team
	</select>
	
	<select id="selectPerformanceThird" parameterType="hashmap" resultType="hashmap">
		select D.product_team as product_team, format(sum(D.contract_amount),0) as contract_amount, format(sum(D.product_amount),0) as product_amount, format(ifnull(sum(D.result_amount),0),0) as result_amount , format(sum(D.last_result_amount),0) as last_result_amount , avg(D.lastRatio) as lastRatio
from
(

select A.prj_name,  A.product_team, A.contract_amount, A.product_amount, B.result_amount, C.amount_used, 
(A.contract_amount - ifnull(C.amount_used, 0)) as last_result_amount, (A.contract_amount - ifnull(C.amount_used, 0))/A.contract_amount*100 as lastRatio
from 
(
select * from t_project_making_infor 
where standard_year = #{STANDARD_YEAR}
<if test="STANDARD_QUARTER != null and !STANDARD_QUARTER.equals('전체')">
and standard_quarter = #{STANDARD_QUARTER} 
</if>
and product_team = #{PRODUCT_TEAM}
 and prj_status != 'project_close'
) A

LEFT OUTER JOIN  
t_project_budget_infor  B 
ON A.prj_num=B.prj_num
LEFT OUTER JOIN
(
	select prj_num, sum(amount_used) as amount_used
	from
	t_cost
	group by  prj_num
    
) AS C
ON A.prj_num=C.prj_num

) AS D
group by D.product_team
	</select>
	
	<select id="selectProjectList" parameterType="hashmap" resultType="hashmap">
		select A.prj_num, ifnull(A.agency, '') as agency, A.prj_name, format(A.contract_amount,0) as contract_amount, format(A.product_amount,0) as product_amount,
		   format(ifnull(B.internal_cost,0),0) as internal_cost, format(ifnull(B.outsourcing_cost,0),0) as outsourcing_cost, format(ifnull(B.progress_cost,0),0) as progress_cost, 
           format((ifnull(B.internal_cost,0)+ifnull(B.outsourcing_cost,0)+ifnull(B.progress_cost,0)),0) as totalCost,
           format((ifnull(F.outsourcing_cost,0) - ifnull(A.B.outsourcing_cost,0)),0) as outsourcing_balance, 
           format(A.product_amount - (ifnull(B.internal_cost,0)+ifnull(B.outsourcing_cost,0)+ifnull(B.progress_cost,0)),0) as performance, 
           DATE_FORMAT(A.contract_start_day, '%Y/%m/%d') as contract_start_day,  
           DATE_FORMAT(A.contract_end_day_1, '%Y/%m/%d') as contract_end_day_1,  
           ifnull( DATE_FORMAT(A.delivery_close_day, '%Y/%m/%d'), '') as delivery_close_day, 
           A.prj_status
from
(
select  prj_num, agency, prj_name, contract_amount, product_amount, contract_start_day, contract_end_day_1, delivery_close_day, prj_status from t_project_making_infor
where standard_year = #{STANDARD_YEAR}
<if test="STANDARD_QUARTER != null and !STANDARD_QUARTER.equals('전체')">
and standard_quarter = #{STANDARD_QUARTER} 
</if>
<if test="PRODUCT_TEAM != null and !PRODUCT_TEAM.equals('전체')">
and product_team = #{PRODUCT_TEAM}
</if>
) as A
LEFT OUTER JOIN
(
select C.prj_name, C.outsourcing_cost, D.progress_cost, E.internal_cost
from
(
select prj_name, sum(amount_used) as outsourcing_cost
from t_cost
where first_classification = '외주비'
<if test="PRODUCT_TEAM != null and !PRODUCT_TEAM.equals('전체')">
and product_team = #{PRODUCT_TEAM}
</if>
group by prj_name  
) as C
LEFT OUTER JOIN 
(
select prj_name, sum(amount_used) as progress_cost
from t_cost
where first_classification = '진행비'
<if test="PRODUCT_TEAM != null and !PRODUCT_TEAM.equals('전체')">
and product_team = #{PRODUCT_TEAM}
</if>
group by prj_name     
) as D
ON C.prj_name=D.prj_name
LEFT OUTER JOIN 
(    
select prj_name, sum(amount_used) as internal_cost
from t_cost
where first_classification = '내부비'
<if test="PRODUCT_TEAM != null and !PRODUCT_TEAM.equals('전체')">
and product_team = #{PRODUCT_TEAM}
</if>
group by prj_name     
) as E
ON C.prj_name=E.prj_name
) as B
ON A.prj_name=B.prj_name
LEFT OUTER JOIN
(
select prj_name, outsourcing_cost from t_project_budget_infor
) as F
ON A.prj_name=F.prj_name
order by prj_num desc
	</select>
	
	<insert id="insertBoard" parameterType="hashmap" useGeneratedKeys="true" keyProperty="IDX">
		<selectKey keyProperty="IDX" resultType="string" order="BEFORE">
			SELECT count(IDX) + 1 FROM TB_FILE
		</selectKey>
		<![CDATA[
			INSERT INTO TB_BOARD
			(
			    TITLE, 
			    CONTENTS, 
			    HIT_CNT, 
			    DEL_GB, 
			    CREATE_DTM, 
			    CREATE_ID
			)
			VALUES
			(
				#{TITLE},
				#{CONTENTS},
			    0, 
			    'N', 
			    NOW(), 
			    'Admin'
			)
		]]>
	</insert>
	
	<update id="updateHitCnt" parameterType="hashmap">
		<![CDATA[
			UPDATE TB_BOARD 
			SET
				HIT_CNT = ifnull(HIT_CNT, 0) + 1
			WHERE
				IDX = #{IDX}	
		]]>
	</update>
	
	
	<select id="selectBoardDetail" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT
				IDX,
				HIT_CNT,
				CREATE_ID,
				CREATE_DTM,
				TITLE,
				CONTENTS
			FROM
				TB_BOARD
			WHERE
				IDX = #{IDX}		
		]]>
	</select>
	
	<update id="updateBoard" parameterType="hashmap">
		<![CDATA[
			UPDATE TB_BOARD 
			SET
				TITLE = #{TITLE},
				CONTENTS = #{CONTENTS}
			WHERE
				IDX = #{IDX}	
		]]>
	</update>
	
	<update id="deleteBoard" parameterType="hashmap">
		<![CDATA[
			UPDATE TB_BOARD
			SET
				DEL_GB = 'Y'
			WHERE
				IDX = #{IDX}	
		]]>
	</update>
	
	<insert id="insertFile" parameterType="hashmap">
		<![CDATA[
			INSERT INTO TB_FILE
			(
				BOARD_IDX,
				ORIGINAL_FILE_NAME,
				STORAGE_FILE_NAME,
				FILE_SIZE,
				CREATE_ID
			)
			VALUES
			(
				#{BOARD_IDX},
				#{ORIGINAL_FILE_NAME},
				#{STORAGE_FILE_NAME},
				#{FILE_SIZE},
				'Admin'
			)
		]]>
	</insert>
	
	<select id="selectFileList" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT
			    IDX,
			    ORIGINAL_FILE_NAME,
			    ROUND(FILE_SIZE/1024,1) AS FILE_SIZE
			FROM
			    TB_FILE
			WHERE
			    BOARD_IDX = #{IDX}
			    AND DEL_GB = 'N'
		]]>
	</select>
	
	<update id="deleteFileList" parameterType="hashmap">
		<![CDATA[
			UPDATE TB_FILE SET 
				DEL_GB = 'Y' 
			WHERE 
				BOARD_IDX = #{IDX}	
		]]>
	</update>
	
	<update id="updateFile" parameterType="hashmap">
		<![CDATA[
			UPDATE TB_FILE SET
				DEL_GB = 'N'
			WHERE
				IDX = #{FILE_IDX}	
		]]>
	</update>
</mapper>