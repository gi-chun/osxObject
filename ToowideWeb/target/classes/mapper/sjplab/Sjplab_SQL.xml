<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="sample">
	
	<select id="login" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT
			    EMPLOYEE_NUM,
				MEMBER_NAME,
			    EMAIL_ADDR,
			    TEAM_NAME,
			    POSITION,
			    AUTHORITY
			FROM
			    T_MEMBER
			WHERE
				EMPLOYEE_NUM = #{USER} AND PASSWORD = #{PASSWORD}
		]]> 
	</select>
	
	<select id="selectMaxRequestNumber" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			select ifnull(max(request_num),0) as g_maxRequestNumber from t_request
		]]> 
	</select>
	
	<select id="selectMaxCostNumber" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			select ifnull(max(cost_num),0) as maxCostNumber from t_cost
		]]> 
	</select>
	
	<select id="selectCostNumber" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			select cost_num as g_current_cost_number from t_cost
			where cost_prg_num = #{g_cost_prg_num}
		]]> 
	</select>
	
	<select id="selectRequestNumber" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			select request_num as g_current_request_num from t_request
			where request_prg_num = #{g_request_prg_num}
		]]> 
	</select>
	
	<select id="selectMemberList" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT
				MEMBER_NUM,
			    EMPLOYEE_NUM,
			    MEMBER_NAME,
			    EMAIL_ADDR,
			    PASSWORD,
			    TEAM_NAME,
			    POSITION,
			    AUTHORITY
			FROM
			    T_MEMBER
			ORDER BY MEMBER_NUM DESC
		]]>
	</select>
	
	<delete id="deleteMember" parameterType="hashmap">
		<![CDATA[
			DELETE FROM T_MEMBER
			WHERE 	EMPLOYEE_NUM = #{EMPLOYEE_NUM}
		]]>
	</delete>
	
	<insert id="insertCardData" parameterType="hashmap">
		insert into t_cost 
			(prj_num, prj_name, status, product_team, user, team_name, first_classification, second_classification, second_classification_etc, third_classification, 
			third_classification_etc,  contents, write_contents, division, use_day, approval_number, card_number, franchisee, amount_used,
			writer, create_day, update_day)
		values
		<foreach collection="idMap.entrySet()" item="element" index="index" separator="," >
         <foreach collection="element" item="item"  separator=","  open="(" close=", now(), now() )"> 
            #{item}   
         </foreach> 
    	</foreach>
    </insert>
	
	<insert id="insertMember" parameterType="hashmap">
		<![CDATA[
			INSERT INTO T_MEMBER
			(
				EMPLOYEE_NUM,
				MEMBER_NAME,
				EMAIL_ADDR,
				PASSWORD,
				AUTHORITY,
				TEAM_NAME,
				POSITION,
				WRITER,
				CREATE_DAY,
				UPDATE_DAY
			)
			VALUES
			(
				#{EMPLOYEE_NUM},
				#{MEMBER_NAME},
				#{EMAIL_ADDR},
				#{PASSWORD},
				#{ACCESS_LEVEL},
				#{TEAM_NAME},
				#{POSITION},
				#{WRITER},
				NOW(),
				NOW()
			)
		]]>
	</insert>
	
	<select id="selectBudgetInternal" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT
			   internal_team_name,
			   internal_team_cost
			FROM
			    t_project_budget_internal
			WHERE 	prj_num = #{g_current_project_number}
		]]>
	</select>
	
	<select id="selectMembersPerTeam" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT
			   member_name
			FROM
			    t_member
			WHERE 	team_name = #{g_team_db_name}
		]]>
	</select>
	
	<select id="selectTeamList" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT
			   team_num,
				team_manage_num,
			    team_name,
			    format(fixed_cost,0) as fixed_cost
			FROM
			    T_TEAM
			ORDER BY team_num DESC
		]]>
	</select>
	
	<select id="selectNoticeList" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT
			   notice_num,
				subject,
			    is_show,
			    writer,
			    DATE_FORMAT(CREATE_DAY, '%Y-%m-%d %T') as create_day,
			    DATE_FORMAT(UPDATE_DAY, '%Y-%m-%d %T') as update_day
			FROM
			    T_NOTICE
			ORDER BY NOTICE_NUM DESC
		]]>
	</select>
	
	<select id="selectNoticeDetail" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT
			 	subject,
				contents,
			    is_show
			FROM
			    T_NOTICE
			WHERE NOTICE_NUM = #{g_notice_num}
		]]>
	</select>
	
	<select id="getNotice" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			select subject, contents from t_notice
where is_show = 'Y' order by update_day desc limit 1
		]]>
	</select>
	
	<select id="selectTeamNames" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT
			    team_num, team_name
			FROM
			    T_TEAM
			ORDER BY team_num DESC
		]]>
	</select>
	
	<delete id="deleteNotice" parameterType="hashmap">
		<![CDATA[
			DELETE FROM T_NOTICE
			WHERE 	notice_num = #{g_notice_num}
		]]>
	</delete>
	
	<delete id="deleteTeam" parameterType="hashmap">
		<![CDATA[
			DELETE FROM T_TEAM
			WHERE 	team_manage_num = #{g_team_manage_num}
		]]>
	</delete>
	
	<insert id="insertTeam" parameterType="hashmap">
		<![CDATA[
			INSERT INTO T_TEAM
			(
				team_manage_num,
				team_name,
				fixed_cost,
				WRITER,
				CREATE_DAY,
				UPDATE_DAY
			)
			VALUES
			(
				#{id_team_num},
				#{id_team_name},
				#{id_fixed_cost},
				#{WRITER},
				NOW(),
				NOW()
			)
		]]>
	</insert>
	
	<insert id="insertNotice" parameterType="hashmap">
		<![CDATA[
			INSERT INTO T_NOTICE
			(
				SUBJECT,
				CONTENTS,
				IS_SHOW,
				WRITER,
				CREATE_DAY,
				UPDATE_DAY
			)
			VALUES
			(
				#{frmSubject},
				#{frmContents},
				#{frmIsShow},
				#{WRITER},
				NOW(),
				NOW()
			)
		]]>
	</insert>
	
	<update id="updateNotice" parameterType="hashmap">
		<![CDATA[
			UPDATE T_NOTICE
			SET
				IS_SHOW        =#{frmIsShow},  
				WRITER         =#{WRITER},
				UPDATE_DAY     = NOW()
			where NOTICE_NUM = #{g_notice_num}
		]]>
	</update>
	
	<select id="selectClassCostPerProject" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
select '예상 실행금액' as title, format(A.contract_amount,0) as contract_amount, format(A.product_amount, 0) as product_amount, format(ifnull(B.outsourcing_cost,0),0) as outsourcing_cost, 
format(ifnull(B.progress_cost,0),0) as progress_cost, format(ifnull(B.internal_cost,0),0) as internal_cost,
format(ifnull(B.outsourcing_cost,0) + ifnull(B.progress_cost,0),0) as making_cost,
format(ifnull(B.outsourcing_cost,0) + ifnull(B.progress_cost,0) + ifnull(B.internal_cost,0),0) as total_cost,
format(A.product_amount - (ifnull(B.outsourcing_cost,0) + ifnull(B.progress_cost,0) + ifnull(B.internal_cost,0)),0) as performance,
round((A.product_amount - (ifnull(B.outsourcing_cost,0) + ifnull(B.progress_cost,0) + ifnull(B.internal_cost,0))) / A.product_amount * 100, 2) as lastRatio,
-- '해당사항없음' as lastRatio,
A.prj_status   
from 
(
select prj_num, prj_name, contract_amount, product_amount, prj_status from t_project_making_infor 
where prj_num = #{g_current_project_number}
) A
LEFT OUTER JOIN
(
select prj_num, outsourcing_cost, progress_cost, internal_cost
from t_project_budget_infor
where prj_num = #{g_current_project_number}
) as B
ON A.prj_num=B.prj_num
union 
select '최종 실행금액' as title, format(A.contract_amount,0) as contract_amount, format(A.product_amount,0) as product_amount,
format(ifnull(B.outsourcing_cost,0),0) as outsourcing_cost, format(ifnull(C.progress_cost,0),0) as progress_cost, format(ifnull(D.internal_cost,0),0) as internal_cost,
format((ifnull(B.outsourcing_cost,0) + ifnull(C.progress_cost,0)),0) as making_cost,
format(ifnull(B.outsourcing_cost,0) + ifnull(C.progress_cost,0) + ifnull(D.internal_cost,0),0) as total_cost,
format(A.product_amount - (ifnull(B.outsourcing_cost,0) + ifnull(C.progress_cost,0) + ifnull(D.internal_cost,0)),0) as performance,
round((A.product_amount - (ifnull(B.outsourcing_cost,0) + ifnull(C.progress_cost,0) + ifnull(D.internal_cost,0))) / A.product_amount * 100, 2) as lastRatio,
-- (A.product_amount - (ifnull(B.outsourcing_cost,0) + ifnull(C.progress_cost,0) + ifnull(D.internal_cost,0))) / E.result_amount * 100 as lastRatio,
A.prj_status  
from 
(
select prj_num, prj_name, contract_amount, product_amount, prj_status from t_project_making_infor 
where prj_num = #{g_current_project_number}
) A
LEFT OUTER JOIN
(
select cast(prj_num as unsigned) as prj_num, sum(amount_used) as outsourcing_cost
from t_cost
where prj_num = #{g_current_project_number}
and first_classification = '외주비'
and status = '승인'
) as B
ON A.prj_num=B.prj_num
LEFT OUTER JOIN
(
select cast(prj_num as unsigned) as prj_num, sum(amount_used) as progress_cost
from t_cost
where prj_num = #{g_current_project_number}
and first_classification = '진행비'
and status = '승인'
) as C
ON A.prj_num=C.prj_num
LEFT OUTER JOIN
(
select cast(prj_num as unsigned) as prj_num, sum(amount_used) as internal_cost
from t_cost
where prj_num = #{g_current_project_number}
and first_classification = '내부비'
and status = '승인'
) as D
ON A.prj_num=D.prj_num
LEFT OUTER JOIN
(
select prj_num, outsourcing_cost, progress_cost, internal_cost, result_amount
from t_project_budget_infor
where prj_num = #{g_current_project_number}
) as E
ON A.prj_num=E.prj_num
		]]> 
	</select>
	
	<select id="selectOutsourcingCostPerProject" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			select ifnull(A.second_classification, B.second_classification) as second_classification, format(B.value,0) as predict_cost, format(ifnull(A.real_cost,0),0) as real_cost 
from
(
select cast(prj_num as unsigned) as prj_num, second_classification, sum(amount_used) as real_cost
from t_cost
where prj_num = #{g_current_project_number}
and first_classification = '외주비'
and status = '승인'
group by second_classification
) as A
RIGHT OUTER JOIN
(
select prj_num, '카메라렌탈' as second_classification, O_CAMERA_RENTAL value
from t_project_budget_infor
where prj_num = #{g_current_project_number}
union
select prj_num, '기자재비' as second_classification, O_EQUIPMENT_COST value
from t_project_budget_infor
where prj_num = #{g_current_project_number}
union
select prj_num, '메이크업' as second_classification, O_MAKEUP_FEE value
from t_project_budget_infor
where prj_num = #{g_current_project_number}
union
select prj_num, '출연료' as second_classification, O_STARRING_FEE value
from t_project_budget_infor
where prj_num = #{g_current_project_number}
union
select prj_num, '작가' as second_classification, O_AUTHOR_FEE value
from t_project_budget_infor
where prj_num = #{g_current_project_number}
union
select prj_num, 'POSTPRODUCT' as second_classification, O_POST_PRODUCT_FEE value
from t_project_budget_infor
where prj_num = #{g_current_project_number}
union
select prj_num, '녹음료' as second_classification, O_RECORD_FEE value
from t_project_budget_infor
where prj_num = #{g_current_project_number}
union
select prj_num, '성우료' as second_classification, O_VOICE_ACTOR_FEE value
from t_project_budget_infor
where prj_num = #{g_current_project_number}
union
select prj_num, '번역료' as second_classification, O_TRANSLATION_FEE value
from t_project_budget_infor
where prj_num = #{g_current_project_number}
union
select prj_num, '자료구매' as second_classification, O_PURCHASE_MATERIALS value
from t_project_budget_infor
where prj_num = #{g_current_project_number}
union
select prj_num, '장소대여' as second_classification, O_PLACE_RENTAL value
from t_project_budget_infor
where prj_num = #{g_current_project_number}
union
select prj_num, '미술및소품구매' as second_classification, O_BUY_ART_ACCESSORIES value
from t_project_budget_infor
where prj_num = #{g_current_project_number}
union
select prj_num, '미술' as second_classification, O_ART value
from t_project_budget_infor
where prj_num = #{g_current_project_number}
union
select prj_num, '해외촬영' as second_classification, O_OVERSEAS_PHOTOGRAPHY value
from t_project_budget_infor
where prj_num = #{g_current_project_number}
union
select prj_num, '번역검수' as second_classification, O_TRANSLATION_INSPECTION value
from t_project_budget_infor
where prj_num = #{g_current_project_number}
union
select prj_num, '번역' as second_classification, O_TRANSLATION value
from t_project_budget_infor
where prj_num = #{g_current_project_number}
union
select prj_num, '납품료' as second_classification, O_DELIVERY_FEE value
from t_project_budget_infor
where prj_num = #{g_current_project_number}
union
select prj_num, '기타' as second_classification, O_ETC value
from t_project_budget_infor
where prj_num = #{g_current_project_number}
) as B
ON A.second_classification=B.second_classification
		]]> 
	</select>
	
	<select id="selectProgressCostPerProject" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			select ifnull(A.second_classification, B.second_classification) as second_classification, format(B.value,0) as predict_cost, format(ifnull(A.real_cost,0),0) as real_cost 
from
(
select cast(prj_num as unsigned) as prj_num, second_classification, sum(amount_used) as real_cost
from t_cost
where prj_num = #{g_current_project_number}
and first_classification = '진행비'
and status = '승인'
group by second_classification
) as A
RIGHT OUTER JOIN
(
select prj_num, '식비' as second_classification, P_FOOD_EXPENSES value
from t_project_budget_infor
where prj_num = #{g_current_project_number}
union
select prj_num, '주유비' as second_classification, P_FUEL_COST value
from t_project_budget_infor
where prj_num = #{g_current_project_number}
union
select prj_num, '교통비' as second_classification, P_TRANSPORTATION_COST value
from t_project_budget_infor
where prj_num = #{g_current_project_number}
union
select prj_num, '숙박비' as second_classification, P_ACCOMMODATION_COST value
from t_project_budget_infor
where prj_num = #{g_current_project_number}
union
select prj_num, '부식비' as second_classification, P_SNACK_COST value
from t_project_budget_infor
where prj_num = #{g_current_project_number}
union
select prj_num, '주차비' as second_classification, P_PARKING_FEE value
from t_project_budget_infor
where prj_num = #{g_current_project_number}
union
select prj_num, '비품구매' as second_classification, P_PURCHASE_OFFICE_SUPPLIES value
from t_project_budget_infor
where prj_num = #{g_current_project_number}
union
select prj_num, '장비렌탈' as second_classification, P_EQUIPMENT_RENTAL value
from t_project_budget_infor
where prj_num = #{g_current_project_number}
union
select prj_num, '기타' as second_classification, P_ETC value
from t_project_budget_infor
where prj_num = #{g_current_project_number}
) as B
ON A.second_classification=B.second_classification
		]]> 
	</select>
	
	<select id="selectInternalCostPerProject" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			select ifnull(A.second_classification, B.second_classification) as second_classification, format(B.value,0) as predict_cost, format(ifnull(A.real_cost,0),0) as real_cost 
from
(
select cast(prj_num as unsigned) as prj_num, second_classification, sum(amount_used) as real_cost
from t_cost
where prj_num = #{g_current_project_number}
and first_classification = '내부비'
and status = '승인'
group by second_classification
) as A
RIGHT OUTER JOIN
(
select prj_num, '차량비' as second_classification, I_CAR_RENTAL value
from t_project_budget_infor
where prj_num = #{g_current_project_number}
union
select prj_num, internal_team_name as second_classification, internal_team_cost as value 
from t_project_budget_internal
where prj_num = #{g_current_project_number}
) as B
ON A.second_classification=B.second_classification
		]]> 
	</select>
	
	<select id="selectCostPerProject" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			select cost_num, division, prj_name, product_team, user, team_name,
first_classification, second_classification, third_classification, card_number, 
approval_number, DATE_FORMAT(use_day, '%Y-%m-%d %T') as use_day, format(cast(amount_used as unsigned),0) as amount_used
from t_cost
where prj_num = #{g_current_project_number}
and status = '승인'
and WRITE_CONTENTS = 'Y'
		]]> 
	</select>
	
	<select id="selectReceiveRequest" parameterType="hashmap" resultType="hashmap">
select request_num, requester_name, request_team, ifnull(reviewer_name,'') as reviewer_name, 
review_team, status, DATE_FORMAT(request_time, '%Y-%m-%d %T') as request_time, 
if(approval_date, DATE_FORMAT(approval_date, '%Y-%m-%d %T'), '미검토') as approval_date,
business_field_1, ifnull(business_field_2, '') as business_field_2,  ifnull(use_order, '') as use_order
from t_request
where year(create_day) = #{g_s_year} 
and month(create_day) = #{g_s_month}
<if test="g_team_db_name != null and !g_team_db_name.equals('전체')">
and review_team = #{g_team_db_name} 
</if>
<if test="g_member_name != null and !g_member_name.equals('전체')">
and reviewer_name = #{g_member_name} 
</if>
<if test="g_business_field_1 != null and !g_business_field_1.equals('전체')">
and business_field_1 = #{g_business_field_1} 
</if>
<if test="g_request_status != null and !g_request_status.equals('전체')">
and status = #{g_request_status} 
</if>
order by update_day desc
	</select>
	
	<select id="selectRequestPerRequestNumber" parameterType="hashmap" resultType="hashmap">
select 
	request_num,
	request_prg_num,
	ifnull(product_team, '') as product_team,
	ifnull(prj_num, '') as prj_num,
    ifnull(prj_name, '') as prj_name,
    requester_name,
    request_team,
    review_team,
    ifnull(reviewer_name, '') as reviewer_name,
    status,
    business_field_1,
    ifnull(business_field_1_etc, '') as business_field_1_etc,
    business_field_2,
    ifnull(business_field_2_etc, '') as business_field_2_etc,
    request_details,
    ifnull(approve_details, '') as approve_details,
    ifnull(notallow_details, '') as notallow_details,
    ifnull(use_order, '') as use_order,
    ifnull(driver, '') as driver,
    ifnull(driver_team, '') as driver_team,
    ifnull(companion, '') as companion,
    ifnull(business_trip_reason, '') as business_trip_reason,
    ifnull(business_trip_area, '') as business_trip_area,
    ifnull(desired_car, '') as desired_car,
    ifnull(before_running_distance, 0) as before_running_distance,
    ifnull(after_running_distance, 0) as after_running_distance,
    ifnull(use_car, '') as use_car,
    ifnull(fuel_status, '1') as fuel_status,
    ifnull(clean_inner, 'N') as clean_inner,
    ifnull(take_photo_four_sides, 'N') as take_photo_four_sides,
    ifnull(internal_car_rent_cost, 0) as internal_car_rent_cost,
    if(deadline, DATE_FORMAT(deadline, '%Y-%m-%d %T'), '') as deadline,
    if(start_time, DATE_FORMAT(start_time, '%Y-%m-%d %T'), '') as start_time,
    if(end_time, DATE_FORMAT(end_time, '%Y-%m-%d %T'), '') as end_time,
    if(request_time, DATE_FORMAT(request_time, '%Y-%m-%d %T'), '') as request_time,
    if(approval_date, DATE_FORMAT(approval_date, '%Y-%m-%d %T'), '') as approval_date
from t_request
where request_num = #{g_current_request_num}
	</select>
	
	<select id="selectRequestPerRequestPRGNumber" parameterType="hashmap" resultType="hashmap">
select * from
(
select 
	request_num,
	request_prg_num,
	ifnull(product_team, '') as product_team,
	ifnull(prj_num, '') as prj_num,
    ifnull(prj_name, '') as prj_name,
    requester_name,
    request_team,
    review_team,
    ifnull(reviewer_name, '') as reviewer_name,
    status,
    business_field_1,
    ifnull(business_field_1_etc, '') as business_field_1_etc,
    business_field_2,
    ifnull(business_field_2_etc, '') as business_field_2_etc,
    request_details,
    ifnull(approve_details, '') as approve_details,
    ifnull(notallow_details, '') as notallow_details,
    ifnull(use_order, '') as use_order,
    ifnull(driver, '') as driver,
    ifnull(driver_team, '') as driver_team,
    ifnull(companion, '') as companion,
    ifnull(business_trip_reason, '') as business_trip_reason,
    ifnull(business_trip_area, '') as business_trip_area,
    ifnull(desired_car, '') as desired_car,
    ifnull(before_running_distance, 0) as before_running_distance,
    ifnull(after_running_distance, 0) as after_running_distance,
    ifnull(use_car, '') as use_car,
    ifnull(fuel_status, '1') as fuel_status,
    ifnull(clean_inner, 'N') as clean_inner,
    ifnull(take_photo_four_sides, 'N') as take_photo_four_sides,
    ifnull(internal_car_rent_cost, 0) as internal_car_rent_cost,
    if(deadline, DATE_FORMAT(deadline, '%Y-%m-%d %T'), '') as deadline,
    if(start_time, DATE_FORMAT(start_time, '%Y-%m-%d %T'), '') as start_time,
    if(end_time, DATE_FORMAT(end_time, '%Y-%m-%d %T'), '') as end_time,
    if(request_time, DATE_FORMAT(request_time, '%Y-%m-%d %T'), '') as request_time,
    if(approval_date, DATE_FORMAT(approval_date, '%Y-%m-%d %T'), '') as approval_date,
    DATE_FORMAT(now(), '%Y-%m-%d %T') as today
from t_request
where request_prg_num = #{g_current_request_prg_num}
) AS A
INNER JOIN
(
select request_prg_num as cost_request_prg_num, cost_num, first_classification, second_classification, ifnull(second_classification_etc, '') as second_classification_etc,
third_classification, ifnull(third_classification_etc, '') as third_classification_etc, 
contents, DATE_FORMAT(use_day, '%Y-%m-%d %T') as use_day, 
division, card_number, approval_number, franchisee, cast(amount_used as unsigned) as amount_used
from t_cost
where request_prg_num = #{g_current_request_prg_num}
) AS B
ON A.request_prg_num=B.cost_request_prg_num
	</select>
	
	<select id="selectTeamReceiveRequest" parameterType="hashmap" resultType="hashmap">
select * from 
(
select request_num, requester_name, request_team, ifnull(reviewer_name,'') as reviewer_name, 
review_team, status, DATE_FORMAT(request_time, '%Y-%m-%d %T') as request_time, 
if(approval_date, DATE_FORMAT(approval_date, '%Y-%m-%d %T'), '미검토') as approval_date,
business_field_1, ifnull(business_field_2, '') as business_field_2,  ifnull(use_order, '') as use_order,
update_day
from t_request
where year(create_day) = #{g_s_year} 
and month(create_day) = #{g_s_month}
<if test="g_business_field_1 != null and !g_business_field_1.equals('전체')">
and business_field_1 = #{g_business_field_1} 
</if>
<if test="g_request_status != null and !g_request_status.equals('전체')">
and status = #{g_request_status} 
</if>
<if test="g_team_db_name != null and !g_team_db_name.equals('전체')">
and review_team = #{g_team_db_name} 
</if>
and reviewer_name is null

union

select request_num, requester_name, request_team, ifnull(reviewer_name,'') as reviewer_name, 
review_team, status, DATE_FORMAT(request_time, '%Y-%m-%d %T') as request_time, 
if(approval_date, DATE_FORMAT(approval_date, '%Y-%m-%d %T'), '미검토') as approval_date,
business_field_1, ifnull(business_field_2, '') as business_field_2,  ifnull(use_order, '') as use_order,
update_day
from t_request
where year(create_day) = #{g_s_year} 
and month(create_day) = #{g_s_month}
<if test="g_business_field_1 != null and !g_business_field_1.equals('전체')">
and business_field_1 = #{g_business_field_1} 
</if>
<if test="g_request_status != null and !g_request_status.equals('전체')">
and status = #{g_request_status} 
</if>
<if test="g_team_db_name != null and !g_team_db_name.equals('전체')">
and review_team = #{g_team_db_name} 
</if>
and reviewer_name = ''
) as A
order by A.update_day DESC
	</select>
	
	<select id="selectRequest" parameterType="hashmap" resultType="hashmap">
select request_num, requester_name, request_team, ifnull(reviewer_name,'') as reviewer_name, 
review_team, status, DATE_FORMAT(request_time, '%Y-%m-%d %T') as request_time, 
if(approval_date, DATE_FORMAT(approval_date, '%Y-%m-%d %T'), '미검토') as approval_date,
business_field_1, ifnull(business_field_2, '') as business_field_2,  ifnull(use_order, '') as use_order
from t_request
where year(create_day) = #{g_s_year} 
and month(create_day) = #{g_s_month}
<if test="g_team_db_name != null and !g_team_db_name.equals('전체')">
and request_team = #{g_team_db_name} 
</if>
<if test="g_member_name != null and !g_member_name.equals('전체')">
and requester_name = #{g_member_name} 
</if>
<if test="g_business_field_1 != null and !g_business_field_1.equals('전체')">
and business_field_1 = #{g_business_field_1} 
</if>
<if test="g_request_status != null and !g_request_status.equals('전체')">
and status = #{g_request_status} 
</if>
order by update_day desc
	</select>
	
	
	<select id="searchCostByApproval" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			select cost_num, division, prj_name, product_team, user, team_name,
first_classification, second_classification, third_classification, card_number, 
approval_number, DATE_FORMAT(use_day, '%Y-%m-%d %T') as use_day, format(cast(amount_used as unsigned),0) as amount_used
from t_cost
where approval_number = #{msFormApprovalNumber}
and product_team = #{g_current_product_team}
		]]> 
	</select>
	
	<select id="searchNoInputData" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			select cost_num, division, prj_name, product_team, user, team_name,
first_classification, second_classification, third_classification, card_number, 
approval_number, DATE_FORMAT(use_day, '%Y-%m-%d %T') as use_day, format(cast(amount_used as unsigned),0) as amount_used
from t_cost
where WRITE_CONTENTS = 'N'
and PRODUCT_TEAM = #{g_current_product_team}
		]]> 
	</select>
	
	<select id="selectCostDetailPerProject" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			select first_classification, second_classification, ifnull(second_classification_etc, '') as second_classification_etc,
third_classification, ifnull(third_classification_etc, '') as third_classification_etc, 
contents, DATE_FORMAT(use_day, '%Y-%m-%d %T') as use_day, 
division, card_number, approval_number, franchisee, cast(amount_used as unsigned) as amount_used
from t_cost
where cost_num = #{g_current_cost_number}
		]]> 
	</select>
	
	<select id="selectEmailForMember" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			select email_addr from t_member
where team_name = #{g_team_db_name}
and member_name = #{g_member_name}
		]]> 
	</select>
	
	<select id="selectEmailListForTeam" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			select email_addr from t_member
where team_name = #{crFormReceiveTeam}
		]]> 
	</select>
	
	<select id="selectAllEmailList" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			select email_addr from t_member
		]]> 
	</select>
	
	<select id="selectCostDetailPerRequestPRGNumber" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			select cost_num, first_classification, second_classification, ifnull(second_classification_etc, '') as second_classification_etc,
third_classification, ifnull(third_classification_etc, '') as third_classification_etc, 
contents, DATE_FORMAT(use_day, '%Y-%m-%d %T') as use_day, 
division, card_number, approval_number, franchisee, cast(amount_used as unsigned) as amount_used
from t_cost
where request_prg_num = #{g_current_request_prg_num}
		]]> 
	</select>
	
	<delete id="deleteBudgetInternal" parameterType="hashmap">
		<![CDATA[
			DELETE FROM T_PROJECT_BUDGET_INTERNAL
			WHERE 	PRJ_NUM = #{g_project_number}
		]]>
	</delete>
	
	<insert id="insertBudgetInternal" parameterType="hashmap">
		<![CDATA[
			INSERT INTO T_PROJECT_BUDGET_INTERNAL
			(
				PRJ_NUM,
				INTERNAL_TEAM_NAME,
				INTERNAL_TEAM_COST,
				WRITER,
				CREATE_DAY,
				UPDATE_DAY
			)
			VALUES
			(
				#{g_project_number},
				#{INTERNAL_TEAM_NAME},
				#{INTERNAL_TEAM_COST},
				#{WRITER},
				NOW(),
				NOW()
			)
		]]>
	</insert>
	
	<insert id="insertBudget" parameterType="hashmap">
		<![CDATA[
			INSERT INTO T_PROJECT_BUDGET_INFOR
			(
				PRJ_NUM,
				PRJ_NAME,
				CONTRACT_AMOUNT,
				PRODUCT_AMOUNT,
				PRODUCT_SUM,
				CUST_SUM,
				RESULT_AMOUNT,
				OUTSOURCING_COST,
				O_CAMERA_RENTAL,
				O_EQUIPMENT_COST,
				O_MAKEUP_FEE,
				O_STARRING_FEE,
				O_AUTHOR_FEE,
				O_POST_PRODUCT_FEE,
				O_RECORD_FEE,
				O_VOICE_ACTOR_FEE,
				O_TRANSLATION_FEE,
				O_PURCHASE_MATERIALS,
				O_PLACE_RENTAL,
				O_BUY_ART_ACCESSORIES,
				O_ART,
				O_OVERSEAS_PHOTOGRAPHY,
				O_TRANSLATION_INSPECTION,
				O_TRANSLATION,
				O_DELIVERY_FEE,
				O_ETC,
				PROGRESS_COST,
				P_FOOD_EXPENSES,
				P_FUEL_COST,
				P_TRANSPORTATION_COST,
				P_ACCOMMODATION_COST,
				P_SNACK_COST,
				P_PARKING_FEE,
				P_PURCHASE_OFFICE_SUPPLIES,
				P_EQUIPMENT_RENTAL,
				P_ETC,
				P_CASH_USAGE,
				INTERNAL_COST,
				I_CAR_RENTAL,
				WRITER,
				CREATE_DAY,
				UPDATE_DAY
			)
			VALUES
			(
				#{g_project_number},
				#{g_project_name},
				#{g_contract_amount},
				#{g_product_amount},
				#{cbFormPreProductSum},
				#{cbFormPreCustSum},
				#{cbFormPreResultAmount},
				#{cbFormPreOutsourcingCost},
				#{cbFormPreOCameraRental},
				#{cbFormPreOEquipmentCost},
				#{cbFormPreOMakeupFee},
				#{cbFormPreOStarringFee},
				#{cbFormPreOAuthorFee},
				#{cbFormPreOPostProduct},
				#{cbFormPreORecordFee},
				#{cbFormPreOVoiceActorFee},
				#{cbFormPreOTranslationFee},
				#{cbFormPreOPurchaseMaterials},
				#{cbFormPreOPlaceRental},
				#{cbFormPreOBuyArtAccessories},
				#{cbFormPreOArt},
				#{cbFormPreOOverSeesPhotography},
				#{cbFormPreOTranslationInspection},
				#{cbFormPreOTranslation},
				#{cbFormPreODeliveryFee},
				#{cbFormPreOEtc},
				#{cbFormPreProgressCost},
				#{cbFormPrePFoodExpenses},
				#{cbFormPrePFuelCost},
				#{cbFormPrePTransportationCost},
				#{cbFormPrePAccommodationCost},
				#{cbFormPrePSnackCost},
				#{cbFormPrePParkingFee},
				#{cbFormPrePPurchaseOfficeSupplies},
				#{cbFormPrePEquipmentRental},
				#{cbFormPrePEtc},
				#{cbFormPrePCashUsage},
				#{cbFormPreInternalCost},
				#{cbFormPreICarRental},
				#{WRITER},
				NOW(),
				NOW()
			)
		]]>
	</insert>
	
	<insert id="insertCostRequest" parameterType="hashmap">
			INSERT INTO T_REQUEST
			(
				REQUEST_PRG_NUM,
<if test="g_current_product_team != null and !g_current_product_team.equals('없음')">
				PRODUCT_TEAM,
</if>
<if test="g_current_project_number != null and !g_current_project_number.equals('0')">
				PRJ_NUM,
</if>
<if test="g_current_project_name != null and !g_current_project_name.equals('없음')">
				PRJ_NAME,
</if>
				REQUESTER_NAME,
				REQUEST_TEAM,
				REVIEW_TEAM,
				STATUS,
				BUSINESS_FIELD_1,
				BUSINESS_FIELD_2,
				BUSINESS_FIELD_2_ETC,
				REQUEST_DETAILS,
<if test="crFormDeadLine != null">
				DEADLINE,
</if>
				REQUEST_TIME,
				WRITER,
				CREATE_DAY,
				UPDATE_DAY
			)
			VALUES
			(
				#{g_request_prg_num},
<if test="g_current_product_team != null and !g_current_product_team.equals('없음')">
				#{g_current_product_team},
</if>
<if test="g_current_project_number != null and !g_current_project_number.equals('0')">
				#{g_current_project_number},
</if>
<if test="g_current_project_name != null and !g_current_project_name.equals('없음')">
				#{g_current_project_name},
</if>
				#{g_member_name},
				#{g_team_db_name},
				#{crFormReceiveTeam},
				'요청',
				#{crFormBusiness1},
				#{crFormBusiness2},
				#{crFormBusiness2Etc},
				#{crFormRequestDetails},
<if test="crFormDeadLine != null">
				#{crFormDeadLine},
</if>
				#{crFormRequestTime},
				#{WRITER},
				NOW(),
				NOW()
			)
	</insert>
	
	<insert id="insertCarRequest" parameterType="hashmap">
			INSERT INTO T_REQUEST
			(
				REQUEST_PRG_NUM,
<if test="g_current_product_team != null and !g_current_product_team.equals('없음')">
				PRODUCT_TEAM,
</if>
<if test="g_current_project_number != null and !g_current_project_number.equals('0')">
				PRJ_NUM,
</if>
<if test="g_current_project_name != null and !g_current_project_name.equals('없음')">
				PRJ_NAME,
</if>
				REQUESTER_NAME,
				REQUEST_TEAM,
				REVIEW_TEAM,
				STATUS,
				BUSINESS_FIELD_1,
				REQUEST_TIME,
				START_TIME,
				END_TIME,
<if test="crcFormDeadLine != null">
				DEADLINE,
</if>
				REQUEST_DETAILS,
				USE_ORDER,
				DRIVER_TEAM,
				DRIVER,
				COMPANION,
				BUSINESS_TRIP_REASON,
				BUSINESS_TRIP_AREA,
				DESIRED_CAR,
				WRITER,
				CREATE_DAY,
				UPDATE_DAY
			)
			VALUES
			(
				#{g_request_prg_num},
<if test="g_current_product_team != null and !g_current_product_team.equals('없음')">
				#{g_current_product_team},
</if>
<if test="g_current_project_number != null and !g_current_project_number.equals('0')">
				#{g_current_project_number},
</if>
<if test="g_current_project_name != null and !g_current_project_name.equals('없음')">
				#{g_current_project_name},
</if>
				#{g_member_name},
				#{g_team_db_name},
				#{crcFormReceiveTeam},
				'요청',
				#{crcFormBusiness1},
				#{crcFormRequestTime},
				#{crcFormStartTime},
				#{crcFormEndTime},
<if test="crcFormDeadLine != null">
				#{crcFormDeadLine},
</if>
				#{crcFormRequestDetails},
				#{crcFormUseOrder},
				#{crcFormDriverTeam},
				#{crcFormDriver},
				#{crcFormCompanion},
				#{crcFormReason},
				#{crcFormTripArea},
				#{crcFormDesiredCar},
				#{WRITER},
				NOW(),
				NOW()
			)
	</insert>
	
		<insert id="insertNormalRequest" parameterType="hashmap">
			INSERT INTO T_REQUEST
			(
				REQUEST_PRG_NUM,
				REQUESTER_NAME,
				REQUEST_TEAM,
				REVIEW_TEAM,
<if test="crnFormReceiver != null">
				REVIEWER_NAME,
</if>
				STATUS,
				BUSINESS_FIELD_1,
				BUSINESS_FIELD_1_ETC,
				BUSINESS_FIELD_2,
				BUSINESS_FIELD_2_ETC,
				REQUEST_TIME,
<if test="crnFormStartTime != null">
				START_TIME,
</if>
<if test="crnFormEndTime != null">
				END_TIME,
</if>
<if test="crnFormDeadLine != null">
				DEADLINE,
</if>
				REQUEST_DETAILS,
				USE_ORDER,
				WRITER,
				CREATE_DAY,
				UPDATE_DAY
			)
			VALUES
			(
				#{g_request_prg_num},
				#{g_member_name},
				#{g_team_db_name},
				#{crnFormReceiveTeam},
<if test="crnFormReceiver != null">
				#{crnFormReceiver},
</if>				
				'요청',
				#{crnFormBusiness1},
				#{crnFormBusiness1Etc},
				#{crnFormBusiness2},
				#{crnFormBusiness2Etc},
				#{crnFormRequestTime},
<if test="crnFormStartTime != null">
				#{crnFormStartTime},
</if>
<if test="crnFormEndTime != null">
				#{crnFormEndTime},
</if>
<if test="crnFormDeadLine != null">
				#{crnFormDeadLine},
</if>
				#{crnFormRequestDetails},
				#{crnFormUseOrder},
				#{WRITER},
				NOW(),
				NOW()
			)
	</insert>
	
	<update id="updateBudget" parameterType="hashmap">
		<![CDATA[
			UPDATE T_PROJECT_BUDGET_INFOR
			SET
				PRODUCT_SUM                     =#{cbFormPreProductSum},  
				CUST_SUM                           =#{cbFormPreCustSum},
				RESULT_AMOUNT                 =#{cbFormPreResultAmount},
				OUTSOURCING_COST           =#{cbFormPreOutsourcingCost},
				O_CAMERA_RENTAL              =#{cbFormPreOCameraRental},
				O_EQUIPMENT_COST             =#{cbFormPreOEquipmentCost},
				O_MAKEUP_FEE                   =#{cbFormPreOMakeupFee},
				O_STARRING_FEE                 =#{cbFormPreOStarringFee},
				O_AUTHOR_FEE                   =#{cbFormPreOAuthorFee},
				O_POST_PRODUCT_FEE             =#{cbFormPreOPostProduct},
				O_RECORD_FEE                   	=#{cbFormPreORecordFee},
				O_VOICE_ACTOR_FEE              =#{cbFormPreOVoiceActorFee},
				O_TRANSLATION_FEE              =#{cbFormPreOTranslationFee},
				O_PURCHASE_MATERIALS           =#{cbFormPreOPurchaseMaterials},
				O_PLACE_RENTAL                 		=#{cbFormPreOPlaceRental},
				O_BUY_ART_ACCESSORIES          =#{cbFormPreOBuyArtAccessories},
				O_ART                                   =	#{cbFormPreOArt},
				O_OVERSEAS_PHOTOGRAPHY         =#{cbFormPreOOverSeesPhotography},
				O_TRANSLATION_INSPECTION       =#{cbFormPreOTranslationInspection},
				O_TRANSLATION                  				=#{cbFormPreOTranslation},
				O_DELIVERY_FEE                 		=#{cbFormPreODeliveryFee},
				O_ETC                          						=#{cbFormPreOEtc},
				PROGRESS_COST                  				=#{cbFormPreProgressCost},
				P_FOOD_EXPENSES                		=#{cbFormPrePFoodExpenses},
				P_FUEL_COST                    			=#{cbFormPrePFuelCost},
				P_TRANSPORTATION_COST          =#{cbFormPrePTransportationCost},
				P_ACCOMMODATION_COST           =#{cbFormPrePAccommodationCost},
				P_SNACK_COST                   =#{cbFormPrePSnackCost},
				P_PARKING_FEE                  =#{cbFormPrePParkingFee},
				P_PURCHASE_OFFICE_SUPPLIES     =#{cbFormPrePPurchaseOfficeSupplies},
				P_EQUIPMENT_RENTAL             =#{cbFormPrePEquipmentRental},
				P_ETC                          =#{cbFormPrePEtc},
				P_CASH_USAGE                   =#{cbFormPrePCashUsage},
				INTERNAL_COST                  =#{cbFormPreInternalCost},
				I_CAR_RENTAL                   =#{cbFormPreICarRental},
				WRITER                               =#{WRITER},
				UPDATE_DAY                        = NOW()
			
			where prj_name = #{g_current_project_name}
		]]>
	</update>
	
	<update id="updateCostDetailPerProject" parameterType="hashmap">
		<![CDATA[
		update t_cost
		set 
		prj_num                   = #{g_update_project_number},
		prj_name                 = #{g_update_project_name},
		product_team           = #{g_current_product_team},
		user                         = #{g_member_name},
		team_name              = #{g_team_db_name},
		first_classification      = #{ucFormFirstClass},
		second_classification       = #{ucFormSecondClass},
		second_classification_etc = #{ucFormSecondClassEtc},
		third_classification           = #{ucFormThirdClass},
		third_classification_etc     = #{ucFormThirdClassEtc},
		contents                         = #{ucFormContents},
		WRITE_CONTENTS          = 'Y',
		writer                             = #{g_member_name},
		update_day                     =  now()
		where cost_num = #{g_current_cost_number}
		]]>
	</update>
	
	<update id="updateRequestPerRequestNumber" parameterType="hashmap">
		update t_request
		set 
<if test="FormBusiness1 != null">
		BUSINESS_FIELD_1                    = #{FormBusiness1},
</if>
		REQUEST_DETAILS                    = #{FormRequestDetails},
		APPROVE_DETAILS                    = #{FormApproveDetails},
		NOTALLOW_DETAILS                 = #{FormNotAllowDetails},
		STATUS           						   = #{g_request_status},
		USE_ORDER                              = #{FormUseOrder},
		BEFORE_RUNNING_DISTANCE    = #{FormBeforeDistance},
		AFTER_RUNNING_DISTANCE      = #{FormAfterDistance},
		USE_CAR           					   = #{FormUseCar},
		FUEL_STATUS           				   = #{FormFuelStatus},
		CLEAN_INNER           				   = #{FormCleanInner},
		TAKE_PHOTO_FOUR_SIDES       = #{FormTakePhoto},
		APPROVAL_DATE           			   = now(),
		writer                      				   = #{WRITER},
		update_day              				   =  now()
		where request_num = #{g_current_request_num}
	</update>
	
	<update id="updateCostPerRequestNumber" parameterType="hashmap">
		<![CDATA[
		update t_cost
		set 
		STATUS           						   = #{g_request_status},
		writer                      				   = #{WRITER},
		update_day              				   =  now()
		where request_prg_num = #{g_current_request_prg_num}
		]]>
	</update>
	
	<insert id="insertCostDetailPerProject" parameterType="hashmap">
		<![CDATA[
			INSERT INTO t_cost
			(
				PRJ_NUM,
				PRJ_NAME,
			    STATUS,
				PRODUCT_TEAM,
				USER,
				TEAM_NAME,
				FIRST_CLASSIFICATION,
				SECOND_CLASSIFICATION,
				SECOND_CLASSIFICATION_ETC,
				THIRD_CLASSIFICATION,
				THIRD_CLASSIFICATION_ETC,
				CONTENTS,
				WRITE_CONTENTS,
				DIVISION,
				USE_DAY,
				APPROVAL_NUMBER,
				CARD_NUMBER,
				FRANCHISEE,
				AMOUNT_USED,
				WRITER,
				CREATE_DAY,
				UPDATE_DAY
			)
			VALUES
			(
				#{g_update_project_number},
				#{g_update_project_name},
				'승인',
				#{g_current_product_team},
				#{g_member_name},
				#{g_team_db_name},
				#{ucFormFirstClass},
				#{ucFormSecondClass},
				#{ucFormSecondClassEtc},
				#{ucFormThirdClass},
				#{ucFormThirdClassEtc},
				#{ucFormContents},
				'Y',
				#{ucFormDivision},
				#{ucFormUseDay},
				#{ucFormApprovalNumber},
				#{ucFormCardNumber},
				#{ucFormFranchisee},
				#{ucFormAmountUsed},
				#{WRITER},
				NOW(),
				NOW()
			)
		]]>
	</insert>
	
	<insert id="insertCostDetailPerRequestForCar" parameterType="hashmap">
			INSERT INTO t_cost
			(
				COST_PRG_NUM,
				REQUEST_PRG_NUM,
<if test="g_current_product_team != null">
				PRODUCT_TEAM,
</if>
<if test="g_current_project_number != null">
				PRJ_NUM,
</if>
<if test="g_current_project_name != null">
				PRJ_NAME,
</if>		
				STATUS,
				USER,
				TEAM_NAME,
				FIRST_CLASSIFICATION,
				SECOND_CLASSIFICATION,
				CONTENTS,
				WRITE_CONTENTS,
				DIVISION,
				USE_DAY,
				AMOUNT_USED,
				WRITER,
				CREATE_DAY,
				UPDATE_DAY
			)
			VALUES
			(
				#{g_cost_prg_num},
				#{g_request_prg_num},
<if test="g_current_product_team != null">
				#{g_current_product_team},
</if>
<if test="g_current_project_number != null">
				#{g_current_project_number},
</if>
<if test="g_current_project_name != null">
				#{g_current_project_name},
</if>		
				'승인',
				#{g_member_name},
				#{g_team_db_name},
				#{crcFormFirstClass},
				#{crcFormSecondClass},
				#{crFormContents},
				'Y',
				#{crcFormDivision},
				NOW(),
				#{crcFormRentCost},
				#{WRITER},
				NOW(),
				NOW()
			)
	</insert>
	
	<insert id="insertCostDetailPerRequest" parameterType="hashmap">
			INSERT INTO t_cost
			(
				COST_PRG_NUM,
				REQUEST_PRG_NUM,
<if test="g_current_product_team != null and !g_current_product_team.equals('없음')">
				PRODUCT_TEAM,
</if>
<if test="g_current_project_number != null and !g_current_project_number.equals('0')">
				PRJ_NUM,
</if>
<if test="g_current_project_name != null and !g_current_project_name.equals('없음')">
				PRJ_NAME,
</if>		
				STATUS,
				USER,
				TEAM_NAME,
				FIRST_CLASSIFICATION,
				SECOND_CLASSIFICATION,
				SECOND_CLASSIFICATION_ETC,
				THIRD_CLASSIFICATION,
				THIRD_CLASSIFICATION_ETC,
				CONTENTS,
				WRITE_CONTENTS,
				DIVISION,
				USE_DAY,
				AMOUNT_USED,
				WRITER,
				CREATE_DAY,
				UPDATE_DAY
			)
			VALUES
			(
				#{g_cost_prg_num},
				#{g_request_prg_num},
<if test="g_current_product_team != null and !g_current_product_team.equals('없음')">
				#{g_current_product_team},
</if>
<if test="g_current_project_number != null and !g_current_project_number.equals('0')">
				#{g_current_project_number},
</if>
<if test="g_current_project_name != null and !g_current_project_name.equals('없음')">
				#{g_current_project_name},
</if>		
				'요청',
				#{g_member_name},
				#{g_team_db_name},
				#{crFormFirstClass},
				#{crFormSecondClass},
				#{crFormSecondClassEtc},
				#{crFormThirdClass},
				#{crFormThirdClassEtc},
				#{crFormContents},
				'Y',
				#{crFormDivision},
				#{crFormUseDay},
				#{crFormAmountUsed},
				#{WRITER},
				NOW(),
				NOW()
			)
	</insert>
	
	<select id="selectBudget" parameterType="hashmap" resultType="hashmap">
		select A.PRJ_NAME, A.PRODUCT_TEAM, A.CHARGE_PM, A.CHARGE_PD, A.CONTRACT_AMOUNT, A.PRODUCT_AMOUNT,
B.PRODUCT_SUM,
B.CUST_SUM,
B.RESULT_AMOUNT,
B.OUTSOURCING_COST,
B.O_CAMERA_RENTAL,
B.O_EQUIPMENT_COST,
B.O_MAKEUP_FEE,
B.O_STARRING_FEE,
B.O_AUTHOR_FEE,
B.O_POST_PRODUCT_FEE,
B.O_RECORD_FEE,
B.O_VOICE_ACTOR_FEE,
B.O_TRANSLATION_FEE,
B.O_PURCHASE_MATERIALS,
B.O_PLACE_RENTAL,
B.O_BUY_ART_ACCESSORIES,
B.O_ART,
B.O_OVERSEAS_PHOTOGRAPHY,
B.O_TRANSLATION_INSPECTION,
B.O_TRANSLATION,
B.O_DELIVERY_FEE,
B.O_ETC,
B.PROGRESS_COST,
B.P_FOOD_EXPENSES,
B.P_FUEL_COST,
B.P_TRANSPORTATION_COST,
B.P_ACCOMMODATION_COST,
B.P_SNACK_COST,
B.P_PARKING_FEE,
B.P_PURCHASE_OFFICE_SUPPLIES,
B.P_EQUIPMENT_RENTAL,
B.P_ETC,
B.P_CASH_USAGE,
B.INTERNAL_COST,
B.I_CAR_RENTAL,
B.I_PHOTOGRAPHY_1_TEAM,
B.I_PHOTOGRAPHY_2_TEAM,
B.I_AERIAL_PHOTOGRAPHY_TEAM,
B.I_AUTHOR_TEAM,
B.I_DESIGN_TEAM
from
(
select prj_num, prj_name, product_team, charge_pm, charge_pd, contract_amount, product_amount from t_project_making_infor
where prj_num = #{g_current_project_number}
) as A
INNER JOIN
(
select * from t_project_budget_infor
) AS B
ON A.prj_num=B.prj_num
	</select>
	
	<insert id="insertProject" parameterType="hashmap">
		<![CDATA[
			INSERT INTO T_PROJECT_MAKING_INFOR
			(
				PRJ_NAME,
				AGENCY,
				PRODUCT_TEAM,
				CHARGE_PM,
				CHARGE_PD,
				CONTRACT_START_DAY,
				CONTRACT_END_DAY_1,
				CONTRACT_END_DAY_2,
				CONTRACT_END_DAY_3,
				DELIVERY_CLOSE_DAY,
				ADMIN_CLOSE_DAY,
				PRJ_COLSE_DAY,
				STANDARD_YEAR,
				STANDARD_QUARTER,
				PRJ_STATUS,
				CONTRACT_AMOUNT,
				PRODUCT_AMOUNT,
				PREPAY_RATIO,
				PREPAY,
				MIDDLE_PAY_1,
				MIDDLE_PAY_2,
				MIDDLE_PAY_3,
				MIDDLE_PAY_4,
				BALANCE,
				USE_REG_SEAL,
				CUSTOM_PROPOSAL_1,
				CUSTOM_PROPOSAL_2,
				CUSTOM_CONTRACT_1,
				CUSTOM_CONTRACT_2,
				REMARK_1,
				REMARK_2,
				REMARK_3,
				REMARK_4,
				REMARK_5,
				NAGOTIATION,
				REPORT_PROGRESS,
				REPORT_RESULT,
				REPORT_SPECIAL,
				DELIVERY_PRODUCT,
				WRITER,
				CREATE_DAY,
				UPDATE_DAY
			)
			VALUES
			(
				#{cpFormPrjName, jdbcType=VARCHAR},
				#{cpFormAgency, jdbcType=VARCHAR},
				#{cpFormCteam, jdbcType=VARCHAR},
				#{cpFormPM, jdbcType=VARCHAR},
				#{cpFormPD, jdbcType=VARCHAR},
				#{cpFormStartDay, jdbcType=VARCHAR},
				#{cpFormContCompleteDay1, jdbcType=VARCHAR},
				#{cpFormContCompleteDay2, jdbcType=VARCHAR},
				#{cpFormContCompleteDay3, jdbcType=VARCHAR},
				#{cpFormDeliCompleteDay, jdbcType=VARCHAR},
				#{cpFormAdminCloseDay, jdbcType=VARCHAR},
				#{cpFormPrjCloseDay, jdbcType=VARCHAR},
				#{cpFormStandardYear, jdbcType=VARCHAR},
				#{cpFormStandardQuarter, jdbcType=VARCHAR},
				#{cpFormPrjStatus, jdbcType=VARCHAR},
				#{cpFormContrAmount, jdbcType=INTEGER},
				#{cpFormPrjAmount, jdbcType=INTEGER},
				#{cpFormPrePayRatio, jdbcType=INTEGER},
				#{cpFormPrePay, jdbcType=INTEGER},
				#{cpFormMidlePay1, jdbcType=INTEGER},
				#{cpFormMidlePay2, jdbcType=INTEGER},
				#{cpFormMidlePay3, jdbcType=INTEGER},
				#{cpFormMidlePay4, jdbcType=INTEGER},
				#{cpFormBalance, jdbcType=INTEGER},
				#{cpFormRegSeal, jdbcType=VARCHAR},
				#{cpFormCustomProposal1, jdbcType=VARCHAR},
				#{cpFormCustomProposal2, jdbcType=VARCHAR},
				#{cpFormCustomContractl1, jdbcType=VARCHAR},
				#{cpFormCustomContractl2, jdbcType=VARCHAR},
				#{cpFormRemark1, jdbcType=VARCHAR},
				#{cpFormRemark2, jdbcType=VARCHAR},
				#{cpFormRemark3, jdbcType=VARCHAR},
				#{cpFormRemark4, jdbcType=VARCHAR},
				#{cpFormRemark5, jdbcType=VARCHAR},
				#{cpFormNagotiation, jdbcType=VARCHAR},
				#{cpFormReportProgress, jdbcType=VARCHAR},
				#{cpFormReportResult, jdbcType=VARCHAR},
				#{cpFormReportSpecial, jdbcType=VARCHAR},
				#{cpFormDeliveryProduct, jdbcType=VARCHAR},
				#{WRITER, jdbcType=VARCHAR},
				NOW(),
				NOW()
			)
		]]>
	</insert>
	
	<update id="updateProject" parameterType="hashmap">
		<![CDATA[
			UPDATE T_PROJECT_MAKING_INFOR
			SET
				PRJ_NAME           = #{cpFormPrjName, jdbcType=VARCHAR}         ,  
				AGENCY             = #{cpFormAgency, jdbcType=VARCHAR}          ,  
				PRODUCT_TEAM       = #{cpFormCteam, jdbcType=VARCHAR}           ,  
				CHARGE_PM          = #{cpFormPM, jdbcType=VARCHAR}              ,  
				CHARGE_PD          = #{cpFormPD, jdbcType=VARCHAR}              ,  
				CONTRACT_START_DAY = #{cpFormStartDay, jdbcType=VARCHAR}        ,  
				CONTRACT_END_DAY_1 = #{cpFormContCompleteDay1, jdbcType=VARCHAR},  
				CONTRACT_END_DAY_2 = #{cpFormContCompleteDay2, jdbcType=VARCHAR},  
				CONTRACT_END_DAY_3 = #{cpFormContCompleteDay3, jdbcType=VARCHAR},  
				DELIVERY_CLOSE_DAY = #{cpFormDeliCompleteDay, jdbcType=VARCHAR} ,  
				ADMIN_CLOSE_DAY    = #{cpFormAdminCloseDay, jdbcType=VARCHAR}   ,  
				PRJ_COLSE_DAY      = #{cpFormPrjCloseDay, jdbcType=VARCHAR}     ,  
				STANDARD_YEAR      = #{cpFormStandardYear, jdbcType=VARCHAR}    ,  
				STANDARD_QUARTER   = #{cpFormStandardQuarter, jdbcType=VARCHAR} ,  
				PRJ_STATUS         = #{cpFormPrjStatus, jdbcType=VARCHAR}       ,  
				CONTRACT_AMOUNT    = #{cpFormContrAmount, jdbcType=INTEGER}     ,  
				PRODUCT_AMOUNT     = #{cpFormPrjAmount, jdbcType=INTEGER}       ,  
				PREPAY_RATIO       = #{cpFormPrePayRatio, jdbcType=INTEGER}     ,  
				PREPAY             = #{cpFormPrePay, jdbcType=INTEGER}          ,  
				MIDDLE_PAY_1       = #{cpFormMidlePay1, jdbcType=INTEGER}       ,  
				MIDDLE_PAY_2       = #{cpFormMidlePay2, jdbcType=INTEGER}       ,  
				MIDDLE_PAY_3       = #{cpFormMidlePay3, jdbcType=INTEGER}       ,  
				MIDDLE_PAY_4       = #{cpFormMidlePay4, jdbcType=INTEGER}       ,  
				BALANCE            = #{cpFormBalance, jdbcType=INTEGER}         ,  
				USE_REG_SEAL       = #{cpFormRegSeal, jdbcType=VARCHAR}         ,  
				CUSTOM_PROPOSAL_1  = #{cpFormCustomProposal1, jdbcType=VARCHAR} ,  
				CUSTOM_PROPOSAL_2  = #{cpFormCustomProposal2, jdbcType=VARCHAR} ,  
				CUSTOM_CONTRACT_1  = #{cpFormCustomContractl1, jdbcType=VARCHAR},  
				CUSTOM_CONTRACT_2  = #{cpFormCustomContractl2, jdbcType=VARCHAR},  
				REMARK_1           = #{cpFormRemark1, jdbcType=VARCHAR}         ,
				REMARK_2           = #{cpFormRemark2, jdbcType=VARCHAR}         ,
				REMARK_3           = #{cpFormRemark3, jdbcType=VARCHAR}         ,
				REMARK_4           = #{cpFormRemark4, jdbcType=VARCHAR}         ,
				REMARK_5           = #{cpFormRemark5, jdbcType=VARCHAR}         ,
				NAGOTIATION        = #{cpFormNagotiation, jdbcType=VARCHAR}     ,  
				REPORT_PROGRESS    = #{cpFormReportProgress, jdbcType=VARCHAR}  ,  
				REPORT_RESULT      = #{cpFormReportResult, jdbcType=VARCHAR}    ,  
				REPORT_SPECIAL     = #{cpFormReportSpecial, jdbcType=VARCHAR}   ,  
				DELIVERY_PRODUCT   = #{cpFormDeliveryProduct, jdbcType=VARCHAR} ,
				WRITER             = #{WRITER, jdbcType=VARCHAR}                ,  
				UPDATE_DAY         = NOW()
			
			where prj_num = #{g_current_project_number}
			
		]]>
	</update>
	
	<insert id="insertFileProject" parameterType="hashmap">
		<![CDATA[
			INSERT INTO T_PROJECT_FILE
			(
				PRJ_NUM,
				ORIGINAL_FILE_NAME,
				STORAGE_FILE_NAME,
				FILE_SIZE,
				FOLDER_NAME,
				IS_DELETE,
				WRITER,
				CREATE_DAY
			)
			VALUES
			(
				#{PRJ_NUM},
				#{ORIGINAL_FILE_NAME},
				#{STORAGE_FILE_NAME},
				#{FILE_SIZE},
				#{FOLDER_NAME},
				'N',
				#{WRITER},
				NOW()
			)
		]]>
	</insert>
	
	<insert id="insertFileCost" parameterType="hashmap">
		<![CDATA[
			INSERT INTO T_COST_FILE
			(
				COST_NUM,
				ORIGINAL_FILE_NAME,
				STORAGE_FILE_NAME,
				FILE_SIZE,
				FOLDER_NAME,
				IS_DELETE,
				WRITER,
				CREATE_DAY
			)
			VALUES
			(
				#{COST_NUM},
				#{ORIGINAL_FILE_NAME},
				#{STORAGE_FILE_NAME},
				#{FILE_SIZE},
				#{FOLDER_NAME},
				'N',
				#{WRITER},
				NOW()
			)
		]]>
	</insert>
	
	<insert id="insertFileRequest" parameterType="hashmap">
		<![CDATA[
			INSERT INTO T_REQUEST_FILE
			(
				REQUEST_NUM,
				ORIGINAL_FILE_NAME,
				STORAGE_FILE_NAME,
				FILE_SIZE,
				FOLDER_NAME,
				IS_DELETE,
				WRITER,
				CREATE_DAY
			)
			VALUES
			(
				#{REQUEST_NUM},
				#{ORIGINAL_FILE_NAME},
				#{STORAGE_FILE_NAME},
				#{FILE_SIZE},
				#{FOLDER_NAME},
				'N',
				#{WRITER},
				NOW()
			)
		]]>
	</insert>
	
	<insert id="insertFileCostNew" parameterType="hashmap">
		<selectKey keyProperty="IDX" resultType="string" order="BEFORE">
			SELECT max(cost_num) FROM t_cost
		</selectKey>
		<![CDATA[
			INSERT INTO T_COST_FILE
			(
				COST_NUM,
				ORIGINAL_FILE_NAME,
				STORAGE_FILE_NAME,
				FILE_SIZE,
				FOLDER_NAME,
				IS_DELETE,
				WRITER,
				CREATE_DAY
			)
			VALUES
			(
				#{IDX},
				#{ORIGINAL_FILE_NAME},
				#{STORAGE_FILE_NAME},
				#{FILE_SIZE},
				#{FOLDER_NAME},
				'N',
				#{WRITER},
				NOW()
			)
		]]>
	</insert>
	
	<select id="selectProjectFiles" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			select file_num, prj_num, original_file_name, storage_file_name, round(file_size/1024,1) as file_size, folder_name, is_delete from t_project_file
where prj_num = #{g_current_project_number}
and is_delete = 'N'
		]]>
	</select>
	
	<update id="deleteFileUpdate" parameterType="hashmap">
		<![CDATA[
			update t_project_file 
			set is_delete = 'Y' 
			WHERE 
				file_num = #{dataFileNum}
		]]>
	</update>
	
	<select id="selectCostFiles" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			select file_num, cost_num, original_file_name, storage_file_name, round(file_size/1024,1) as file_size, folder_name, is_delete from t_cost_file
where cost_num = #{g_current_cost_number}
and is_delete = 'N'
		]]>
	</select>
	
	<select id="selectRequestFiles" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			select file_num, request_num, original_file_name, storage_file_name, round(file_size/1024,1) as file_size, folder_name, is_delete from t_request_file
where request_num = #{g_current_request_num}
and is_delete = 'N'
		]]>
	</select>
	
	<update id="deleteCostFileUpdate" parameterType="hashmap">
		<![CDATA[
			update t_cost_file 
			set is_delete = 'Y' 
			WHERE 
				file_num = #{dataFileNum}
		]]>
	</update>
	
	<update id="deleteRequestFileUpdate" parameterType="hashmap">
		<![CDATA[
			update t_request_file 
			set is_delete = 'Y' 
			WHERE 
				file_num = #{dataFileNum}
		]]>
	</update>
	
	<select id="selectProject" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			select 
PRJ_NAME,
AGENCY,
PRODUCT_TEAM,
CHARGE_PM,
CHARGE_PD,
DATE_FORMAT(CONTRACT_START_DAY, '%Y%m%d') as CONTRACT_START_DAY,
DATE_FORMAT(CONTRACT_END_DAY_1, '%Y%m%d') as CONTRACT_END_DAY_1,
DATE_FORMAT(CONTRACT_END_DAY_2, '%Y%m%d') as CONTRACT_END_DAY_2,
DATE_FORMAT(CONTRACT_END_DAY_3, '%Y%m%d') as CONTRACT_END_DAY_3,
DATE_FORMAT(DELIVERY_CLOSE_DAY, '%Y%m%d') as DELIVERY_CLOSE_DAY,
DATE_FORMAT(ADMIN_CLOSE_DAY, '%Y%m%d') as ADMIN_CLOSE_DAY,
DATE_FORMAT(PRJ_COLSE_DAY, '%Y%m%d') as PRJ_COLSE_DAY,
STANDARD_YEAR,
STANDARD_QUARTER,
PRJ_STATUS,
ifnull(CONTRACT_AMOUNT, 0) as CONTRACT_AMOUNT,
ifnull(PRODUCT_AMOUNT, 0) as PRODUCT_AMOUNT,
ifnull(PREPAY_RATIO, 0) as PREPAY_RATIO,
ifnull(PREPAY, 0) as PREPAY,
ifnull(MIDDLE_PAY_1, 0) as MIDDLE_PAY_1,
ifnull(MIDDLE_PAY_2, 0) as MIDDLE_PAY_2,
ifnull(MIDDLE_PAY_3, 0) as MIDDLE_PAY_3,
ifnull(MIDDLE_PAY_4, 0) as MIDDLE_PAY_4,
ifnull(BALANCE, 0) as BALANCE,
USE_REG_SEAL,
CUSTOM_PROPOSAL_1,
CUSTOM_PROPOSAL_2,
CUSTOM_CONTRACT_1,
CUSTOM_CONTRACT_2,
REMARK_1,
REMARK_2,
REMARK_3,
REMARK_4,
REMARK_5,
NAGOTIATION,
REPORT_PROGRESS,
REPORT_RESULT,
REPORT_SPECIAL,
DELIVERY_PRODUCT
from t_project_making_infor
where prj_num = #{g_current_project_number}
		]]>
	</select>
	
	<select id="selectProjectNumber" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT
				PRJ_NUM
			FROM
				T_PROJECT_MAKING_INFOR
			WHERE
				PRJ_NAME = #{PRJ_NAME}		
		]]>
	</select>
	
	<select id="selectBoardList" parameterType="hashmap" resultType="hashmap">
<!-- 		<include refid="common.pagingPre"/>  -->
		<![CDATA[
			SELECT
				IDX,
			    IDX,
			    TITLE,
			    HIT_CNT,
			    DATE_FORMAT(CREATE_DTM, '%Y-%m-%d %h:%i %p') AS CREATE_DTM
			FROM
			    TB_BOARD
			WHERE
				DEL_GB = 'N'
		]]>
<!-- 		<include refid="common.pagingPost"/>  -->
	</select>
	
	<select id="selectPerformanceFirstTotal" parameterType="hashmap" resultType="hashmap">
			select A.product_team as product_team, ifnull(A.totalProject, "0") as totalProject, ifnull(B.completeProject, "0") as completeProject, ifnull(C.ingProject, "0") as ingProject
			from
			(
			select '전체' as product_team, count(prj_name) as totalProject  from t_project_making_infor 
			where standard_year = #{STANDARD_YEAR}
			<if test="STANDARD_QUARTER != null and !STANDARD_QUARTER.equals('전체')">
			and standard_quarter = #{STANDARD_QUARTER} 
			</if>
			union 
			select product_team, count(prj_name) as totalProject from t_project_making_infor 
			where standard_year = #{STANDARD_YEAR}
			<if test="STANDARD_QUARTER != null and !STANDARD_QUARTER.equals('전체')">
			and standard_quarter = #{STANDARD_QUARTER} 
			</if>
			 group by product_team
			 ) as A
			 LEFT OUTER JOIN
			 (
			select '전체' as product_team, count(prj_name) as completeProject  from t_project_making_infor 
			where standard_year = #{STANDARD_YEAR}
			<if test="STANDARD_QUARTER != null and !STANDARD_QUARTER.equals('전체')">
			and standard_quarter = #{STANDARD_QUARTER} 
			</if>
			 and prj_status = 'project_close'
			union
			select product_team, count(prj_name) as completeProject from t_project_making_infor 
			where standard_year = #{STANDARD_YEAR}
			<if test="STANDARD_QUARTER != null and !STANDARD_QUARTER.equals('전체')">
			and standard_quarter = #{STANDARD_QUARTER} 
			</if> 
			 and prj_status = 'project_close'
			 group by product_team
			 ) as B
			 ON A.product_team=B.product_team
			 LEFT OUTER JOIN
			 (
			select '전체' as product_team, count(prj_name) as ingProject  from t_project_making_infor 
			where standard_year = #{STANDARD_YEAR}
			<if test="STANDARD_QUARTER != null and !STANDARD_QUARTER.equals('전체')">
			and standard_quarter = #{STANDARD_QUARTER} 
			</if> 
			 and prj_status != 'project_close'
			union
			select product_team, count(prj_name) as ingProject from t_project_making_infor 
			where standard_year = #{STANDARD_YEAR}
			<if test="STANDARD_QUARTER != null and !STANDARD_QUARTER.equals('전체')">
			and standard_quarter = #{STANDARD_QUARTER} 
			</if> 
			 and prj_status != 'project_close'
			 group by product_team
			) as C
			ON A.product_team=C.product_team       
	</select>
	
	<select id="selectPerformanceFirst" parameterType="hashmap" resultType="hashmap">
			select A.product_team as product_team, ifnull(A.totalProject, "0") as totalProject, ifnull(B.completeProject, "0") as completeProject, ifnull(C.ingProject, "0") as ingProject
			from
			(
			select product_team, count(prj_name) as totalProject from t_project_making_infor 
			where standard_year = #{STANDARD_YEAR}
			<if test="STANDARD_QUARTER != null and !STANDARD_QUARTER.equals('전체')">
			and standard_quarter = #{STANDARD_QUARTER} 
			</if>
			and product_team = #{PRODUCT_TEAM}
			 group by product_team
			 ) as A
			 LEFT OUTER JOIN
			 (
			select product_team, count(prj_name) as completeProject from t_project_making_infor 
			where standard_year = #{STANDARD_YEAR}
			<if test="STANDARD_QUARTER != null and !STANDARD_QUARTER.equals('전체')">
			and standard_quarter = #{STANDARD_QUARTER} 
			</if> 
			and product_team = #{PRODUCT_TEAM}
			 and prj_status = 'project_close'
			 group by product_team
			 ) as B
			 ON A.product_team=B.product_team
			 LEFT OUTER JOIN
			 (
			select product_team, count(prj_name) as ingProject from t_project_making_infor 
			where standard_year = #{STANDARD_YEAR}
			<if test="STANDARD_QUARTER != null and !STANDARD_QUARTER.equals('전체')">
			and standard_quarter = #{STANDARD_QUARTER} 
			</if>
			and product_team = #{PRODUCT_TEAM} 
			 and prj_status != 'project_close'
			 group by product_team
			) as C
			ON A.product_team=C.product_team       
	</select>
	
	<select id="selectPerformanceSecondTotal" parameterType="hashmap" resultType="hashmap">
		select '전체' as product_team, format(ifnull(sum(G.contract_amount),0),0) as contract_amount, format(ifnull(sum(G.product_amount),0),0) as product_amount, 
format(ifnull(sum(G.result_amount),0),0) as result_amount, format(ifnull(sum(G.last_result_amount),0),0) as last_result_amount, format(sum(G.fixed_cost),0) as fixed_cost, ifnull(round(avg(G.lastRatio),2),0) as lastRatio
		from
		(
		 select E.product_team, E.contract_amount, E.product_amount,
        E.result_amount , E.last_result_amount as last_result_amount, F.fixed_cost, round((E.last_result_amount/F.fixed_cost*100),1) as lastRatio 
        from
        (
		select D.product_team, sum(D.contract_amount) as contract_amount, sum(D.product_amount) as product_amount,
        ifnull(sum(D.result_amount),0) as result_amount , sum(D.last_result_amount) as last_result_amount 
		from
		(
		
		select A.prj_name,  A.product_team, A.contract_amount, A.product_amount, B.result_amount, C.amount_used, 
		(A.product_amount - ifnull(C.amount_used, 0)) as last_result_amount
		from 
		(
		select * from t_project_making_infor 
		where standard_year = #{STANDARD_YEAR}
		<if test="STANDARD_QUARTER != null and !STANDARD_QUARTER.equals('전체')">
		and standard_quarter = #{STANDARD_QUARTER} 
		</if>
		 and prj_status = 'project_close'
		) as A
		LEFT OUTER JOIN
        (
			select prj_num, result_amount
			from t_project_budget_infor  
        ) as B 
		ON A.prj_num=B.prj_num
		LEFT OUTER JOIN
		(
			select cast(prj_num as unsigned) as prj_num, ifnull(sum(amount_used ),0) as amount_used
			from
			t_cost
			where status = '승인'
			group by  prj_num
		    
		) AS C
		ON A.prj_num=C.prj_num
        
		) AS D
		group by D.product_team
        ) AS E
        INNER JOIN
        (
			select team_name, fixed_cost
            from t_team
        ) AS F
        ON E.product_team=F.team_name
		
		) as G
		
		union 
		
        select E.product_team, format(ifnull(E.contract_amount,0),0) as contract_amount, format(ifnull(E.product_amount,0),0) as product_amount,
        format(ifnull(E.result_amount,0),0) as result_amount , format(E.last_result_amount,0) as last_result_amount, format(F.fixed_cost,0) as fixed_cost, round((E.last_result_amount/F.fixed_cost*100),2) as lastRatio 
        from
        (
		select D.product_team, sum(D.contract_amount) as contract_amount, sum(D.product_amount) as product_amount,
        ifnull(sum(D.result_amount),0) as result_amount , sum(D.last_result_amount) as last_result_amount 
		from
		(
		
		select A.prj_name,  A.product_team, A.contract_amount, A.product_amount, B.result_amount, C.amount_used, 
		(A.product_amount - ifnull(C.amount_used, 0)) as last_result_amount
		from 
		(
		select * from t_project_making_infor 
		where standard_year = #{STANDARD_YEAR}
		<if test="STANDARD_QUARTER != null and !STANDARD_QUARTER.equals('전체')">
		and standard_quarter = #{STANDARD_QUARTER} 
		</if>
		 and prj_status = 'project_close'
		) as A
		LEFT OUTER JOIN
        (
			select prj_num, result_amount
			from t_project_budget_infor  
        ) as B 
		ON A.prj_num=B.prj_num
		LEFT OUTER JOIN
		(
			select cast(prj_num as unsigned) as prj_num, ifnull(sum(amount_used ),0) as amount_used
			from
			t_cost
			where status = '승인'
			group by  prj_num
		    
		) AS C
		ON A.prj_num=C.prj_num
        
		) AS D
		group by D.product_team
        ) AS E
        INNER JOIN
        (
			select team_name, fixed_cost
            from t_team
        ) AS F
        ON E.product_team=F.team_name
	</select>
	
	<select id="selectPerformanceThirdTotal" parameterType="hashmap" resultType="hashmap">
		select '전체' as product_team, format(ifnull(sum(G.contract_amount),0),0) as contract_amount, format(ifnull(sum(G.product_amount),0),0) as product_amount, 
format(ifnull(sum(G.result_amount),0),0) as result_amount, format(ifnull(sum(G.last_result_amount),0),0) as last_result_amount, format(sum(G.fixed_cost),0) as fixed_cost, ifnull(round(avg(G.lastRatio),2),0) as lastRatio
		from
		(
		 select E.product_team, E.contract_amount, E.product_amount,
        E.result_amount , E.last_result_amount as last_result_amount, F.fixed_cost, round((E.last_result_amount/F.fixed_cost*100),2) as lastRatio 
        from
        (
		select D.product_team, sum(D.contract_amount) as contract_amount, sum(D.product_amount) as product_amount,
        ifnull(sum(D.result_amount),0) as result_amount , sum(D.last_result_amount) as last_result_amount 
		from
		(
				select A.prj_name,  A.product_team, A.contract_amount, A.product_amount, B.result_amount, C.amount_used, 
				(A.product_amount - ifnull(C.amount_used, 0)) as last_result_amount
				from 
				(
				select * from t_project_making_infor 
				where standard_year = #{STANDARD_YEAR}
		<if test="STANDARD_QUARTER != null and !STANDARD_QUARTER.equals('전체')">
		and standard_quarter = #{STANDARD_QUARTER} 
		</if>
		 and prj_status = 'project_close'
				) as A
				LEFT OUTER JOIN
				(
					select prj_num, result_amount
					from t_project_budget_infor  
				) as B 
				ON A.prj_num=B.prj_num
				LEFT OUTER JOIN
				(
					select cast(prj_num as unsigned) as prj_num, ifnull(sum(amount_used ),0) as amount_used
					from
					t_cost
					where status = '승인'
					group by  prj_num
					
				) AS C
				ON A.prj_num=C.prj_num
				
				union
				
				select A.prj_name,  A.product_team, A.contract_amount, A.product_amount, B.result_amount, B.cust_sum as amount_used,
				B.result_amount as last_result_amount
				from 
				(
				select * from t_project_making_infor 
				where standard_year = #{STANDARD_YEAR}
		<if test="STANDARD_QUARTER != null and !STANDARD_QUARTER.equals('전체')">
		and standard_quarter = #{STANDARD_QUARTER} 
		</if>
		 and prj_status != 'project_close'
				) as A
				LEFT OUTER JOIN
				(
					select prj_num, cust_sum, result_amount
					from t_project_budget_infor  
				) as B 
				ON A.prj_num=B.prj_num
        
		) AS D
		group by D.product_team
      
        ) AS E
        INNER JOIN
        (
			select team_name, fixed_cost
            from t_team
        ) AS F
        ON E.product_team=F.team_name
		
		) as G
		
		union 
		
        select E.product_team, format(ifnull(E.contract_amount,0),0) as contract_amount, format(ifnull(E.product_amount,0),0) as product_amount,
        format(ifnull(E.result_amount,0),0) as result_amount , format(E.last_result_amount,0) as last_result_amount, format(F.fixed_cost,0) as fixed_cost, round((E.last_result_amount/F.fixed_cost*100),2) as lastRatio 
        from
        (
		select D.product_team, sum(D.contract_amount) as contract_amount, sum(D.product_amount) as product_amount,
        ifnull(sum(D.result_amount),0) as result_amount , sum(D.last_result_amount) as last_result_amount 
		from
		(
		
				select A.prj_name,  A.product_team, A.contract_amount, A.product_amount, B.result_amount, C.amount_used, 
				(A.product_amount - ifnull(C.amount_used, 0)) as last_result_amount
				from 
				(
				select * from t_project_making_infor 
				where standard_year = #{STANDARD_YEAR}
		<if test="STANDARD_QUARTER != null and !STANDARD_QUARTER.equals('전체')">
		and standard_quarter = #{STANDARD_QUARTER} 
		</if>
		 and prj_status = 'project_close'
				) as A
				LEFT OUTER JOIN
				(
					select prj_num, result_amount
					from t_project_budget_infor  
				) as B 
				ON A.prj_num=B.prj_num
				LEFT OUTER JOIN
				(
					select cast(prj_num as unsigned) as prj_num, ifnull(sum(amount_used ),0) as amount_used
					from
					t_cost
					where status = '승인'
					group by  prj_num
					
				) AS C
				ON A.prj_num=C.prj_num
				
				union
				
				select A.prj_name,  A.product_team, A.contract_amount, A.product_amount, B.result_amount, B.cust_sum as amount_used,
				B.result_amount as last_result_amount
				from 
				(
				select * from t_project_making_infor 
				where standard_year = #{STANDARD_YEAR}
		<if test="STANDARD_QUARTER != null and !STANDARD_QUARTER.equals('전체')">
		and standard_quarter = #{STANDARD_QUARTER} 
		</if>
		 and prj_status != 'project_close'
				) as A
				LEFT OUTER JOIN
				(
					select prj_num, cust_sum, result_amount
					from t_project_budget_infor  
				) as B 
				ON A.prj_num=B.prj_num
        
		) AS D
		group by D.product_team
        ) AS E
        INNER JOIN
        (
			select team_name, fixed_cost
            from t_team
        ) AS F
        ON E.product_team=F.team_name
	</select>
	
	<select id="selectPerformanceSecond" parameterType="hashmap" resultType="hashmap">
 select E.product_team, format(ifnull(E.contract_amount,0),0) as contract_amount, format(ifnull(E.product_amount,0),0) as product_amount,
        format(ifnull(E.result_amount,0),0) as result_amount , format(E.last_result_amount,0) as last_result_amount, format(F.fixed_cost,0) as fixed_cost, round((E.last_result_amount/F.fixed_cost*100),2) as lastRatio 
        from
        (
		select D.product_team, sum(D.contract_amount) as contract_amount, sum(D.product_amount) as product_amount,
        ifnull(sum(D.result_amount),0) as result_amount , sum(D.last_result_amount) as last_result_amount 
		from
		(
		
		select A.prj_name,  A.product_team, A.contract_amount, A.product_amount, B.result_amount, C.amount_used, 
		(A.product_amount - ifnull(C.amount_used, 0)) as last_result_amount
		from 
		(
		select * from t_project_making_infor 
		where standard_year = #{STANDARD_YEAR}
<if test="STANDARD_QUARTER != null and !STANDARD_QUARTER.equals('전체')">
and standard_quarter = #{STANDARD_QUARTER} 
</if>
and product_team = #{PRODUCT_TEAM}
 and prj_status = 'project_close'
		) as A
		LEFT OUTER JOIN
        (
			select prj_num, result_amount
			from t_project_budget_infor  
        ) as B 
		ON A.prj_num=B.prj_num
		LEFT OUTER JOIN
		(
			select cast(prj_num as unsigned) as prj_num, ifnull(sum(amount_used ),0) as amount_used
			from
			t_cost
			where status = '승인'
			group by  prj_num
		    
		) AS C
		ON A.prj_num=C.prj_num
        
		) AS D
		group by D.product_team
        ) AS E
        INNER JOIN
        (
			select team_name, fixed_cost
            from t_team
        ) AS F
        ON E.product_team=F.team_name
	</select>
	
	<select id="selectPerformanceThird" parameterType="hashmap" resultType="hashmap">
		        select E.product_team, format(ifnull(E.contract_amount,0),0) as contract_amount, format(ifnull(E.product_amount,0),0) as product_amount,
        format(ifnull(E.result_amount,0),0) as result_amount , format(E.last_result_amount,0) as last_result_amount, format(F.fixed_cost,0) as fixed_cost, round((E.last_result_amount/F.fixed_cost*100),2) as lastRatio  
        from
        (
		select D.product_team, sum(D.contract_amount) as contract_amount, sum(D.product_amount) as product_amount,
        ifnull(sum(D.result_amount),0) as result_amount , sum(D.last_result_amount) as last_result_amount 
		from
		(
		
				select A.prj_name,  A.product_team, A.contract_amount, A.product_amount, B.result_amount, C.amount_used, 
				(A.product_amount - ifnull(C.amount_used, 0)) as last_result_amount
				from 
				(
				select * from t_project_making_infor 
				where standard_year = #{STANDARD_YEAR}
<if test="STANDARD_QUARTER != null and !STANDARD_QUARTER.equals('전체')">
and standard_quarter = #{STANDARD_QUARTER} 
</if>
and product_team = #{PRODUCT_TEAM}
 and prj_status = 'project_close'
				) as A
				LEFT OUTER JOIN
				(
					select prj_num, result_amount
					from t_project_budget_infor  
				) as B 
				ON A.prj_num=B.prj_num
				LEFT OUTER JOIN
				(
					select cast(prj_num as unsigned) as prj_num, ifnull(sum(amount_used ),0) as amount_used
					from
					t_cost
					where status = '승인'
					group by  prj_num
					
				) AS C
				ON A.prj_num=C.prj_num
				
				union
				
				select A.prj_name,  A.product_team, A.contract_amount, A.product_amount, B.result_amount, B.cust_sum as amount_used,
				B.result_amount as last_result_amount
				from 
				(
				select * from t_project_making_infor 
				where standard_year = #{STANDARD_YEAR}
<if test="STANDARD_QUARTER != null and !STANDARD_QUARTER.equals('전체')">
and standard_quarter = #{STANDARD_QUARTER} 
</if>
and product_team = #{PRODUCT_TEAM}
 and prj_status != 'project_close'
				) as A
				LEFT OUTER JOIN
				(
					select prj_num, cust_sum, result_amount
					from t_project_budget_infor  
				) as B 
				ON A.prj_num=B.prj_num
        
		) AS D
		group by D.product_team
        ) AS E
        INNER JOIN
        (
			select team_name, fixed_cost
            from t_team
        ) AS F
        ON E.product_team=F.team_name
	</select>
	
	<select id="selectInternalClassification" parameterType="hashmap" resultType="hashmap">
	select prj_num, internal_team_name from t_project_budget_internal
	where prj_num = #{g_current_project_number}
	</select>
	
	<select id="getProjectNameList" parameterType="hashmap" resultType="hashmap">
	select prj_num, prj_name from t_project_making_infor
	where standard_year = #{STANDARD_YEAR}
	<if test="STANDARD_QUARTER != null and !STANDARD_QUARTER.equals('전체')">
	and standard_quarter = #{STANDARD_QUARTER} 
	</if>
	<if test="PRODUCT_TEAM != null and !PRODUCT_TEAM.equals('전체')">
	and PRODUCT_TEAM = #{PRODUCT_TEAM} 
	</if>
	</select>
	
	<select id="selectProjectList" parameterType="hashmap" resultType="hashmap">
		select A.prj_num, ifnull(A.agency, '') as agency, A.prj_name, format(A.contract_amount,0) as contract_amount, format(A.product_amount,0) as product_amount,
		   format(ifnull(B.internal_cost,0),0) as internal_cost, format(ifnull(B.outsourcing_cost,0),0) as outsourcing_cost, format(ifnull(B.progress_cost,0),0) as progress_cost, 
           format((ifnull(B.internal_cost,0)+ifnull(B.outsourcing_cost,0)+ifnull(B.progress_cost,0)),0) as totalCost,
           format((ifnull(F.outsourcing_cost,0) - ifnull(A.B.outsourcing_cost,0)),0) as outsourcing_balance, 
           format(A.product_amount - (ifnull(B.internal_cost,0)+ifnull(B.outsourcing_cost,0)+ifnull(B.progress_cost,0)),0) as performance, 
           DATE_FORMAT(A.contract_start_day, '%Y/%m/%d') as contract_start_day,  
           DATE_FORMAT(A.contract_end_day_1, '%Y/%m/%d') as contract_end_day_1,  
           ifnull( DATE_FORMAT(A.delivery_close_day, '%Y/%m/%d'), '') as delivery_close_day, 
           A.prj_status
from
(
select  prj_num, agency, prj_name, contract_amount, product_amount, contract_start_day, contract_end_day_1, delivery_close_day, prj_status from t_project_making_infor
where standard_year = #{STANDARD_YEAR}
<if test="STANDARD_QUARTER != null and !STANDARD_QUARTER.equals('전체')">
and standard_quarter = #{STANDARD_QUARTER} 
</if>
<if test="PRODUCT_TEAM != null and !PRODUCT_TEAM.equals('전체')">
and product_team = #{PRODUCT_TEAM}
</if>
) as A
LEFT OUTER JOIN
(
select C.prj_name, C.outsourcing_cost, D.progress_cost, E.internal_cost
from
(
select prj_name, sum(amount_used) as outsourcing_cost
from t_cost
where first_classification = '외주비'
and status = '승인'
<if test="PRODUCT_TEAM != null and !PRODUCT_TEAM.equals('전체')">
and product_team = #{PRODUCT_TEAM}
</if>
group by prj_name  
) as C
LEFT OUTER JOIN 
(
select prj_name, sum(amount_used) as progress_cost
from t_cost
where first_classification = '진행비'
and status = '승인'
<if test="PRODUCT_TEAM != null and !PRODUCT_TEAM.equals('전체')">
and product_team = #{PRODUCT_TEAM}
</if>
group by prj_name     
) as D
ON C.prj_name=D.prj_name
LEFT OUTER JOIN 
(    
select prj_name, sum(amount_used) as internal_cost
from t_cost
where first_classification = '내부비'
and status = '승인'
<if test="PRODUCT_TEAM != null and !PRODUCT_TEAM.equals('전체')">
and product_team = #{PRODUCT_TEAM}
</if>
group by prj_name     
) as E
ON C.prj_name=E.prj_name
) as B
ON A.prj_name=B.prj_name
LEFT OUTER JOIN
(
select prj_name, outsourcing_cost from t_project_budget_infor
) as F
ON A.prj_name=F.prj_name
order by prj_num desc
	</select>
	
	<insert id="insertBoard" parameterType="hashmap" useGeneratedKeys="true" keyProperty="IDX">
		<selectKey keyProperty="IDX" resultType="string" order="BEFORE">
			SELECT count(IDX) + 1 FROM TB_FILE
		</selectKey>
		<![CDATA[
			INSERT INTO TB_BOARD
			(
			    TITLE, 
			    CONTENTS, 
			    HIT_CNT, 
			    DEL_GB, 
			    CREATE_DTM, 
			    CREATE_ID
			)
			VALUES
			(
				#{TITLE},
				#{CONTENTS},
			    0, 
			    'N', 
			    NOW(), 
			    'Admin'
			)
		]]>
	</insert>
	
	<update id="updateHitCnt" parameterType="hashmap">
		<![CDATA[
			UPDATE TB_BOARD 
			SET
				HIT_CNT = ifnull(HIT_CNT, 0) + 1
			WHERE
				IDX = #{IDX}	
		]]>
	</update>
	
	
	<select id="selectBoardDetail" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT
				IDX,
				HIT_CNT,
				CREATE_ID,
				CREATE_DTM,
				TITLE,
				CONTENTS
			FROM
				TB_BOARD
			WHERE
				IDX = #{IDX}		
		]]>
	</select>
	
	<update id="updateBoard" parameterType="hashmap">
		<![CDATA[
			UPDATE TB_BOARD 
			SET
				TITLE = #{TITLE},
				CONTENTS = #{CONTENTS}
			WHERE
				IDX = #{IDX}	
		]]>
	</update>
	
	<update id="deleteBoard" parameterType="hashmap">
		<![CDATA[
			UPDATE TB_BOARD
			SET
				DEL_GB = 'Y'
			WHERE
				IDX = #{IDX}	
		]]>
	</update>
	
	<insert id="insertFile" parameterType="hashmap">
		<![CDATA[
			INSERT INTO TB_FILE
			(
				BOARD_IDX,
				ORIGINAL_FILE_NAME,
				STORAGE_FILE_NAME,
				FILE_SIZE,
				CREATE_ID
			)
			VALUES
			(
				#{BOARD_IDX},
				#{ORIGINAL_FILE_NAME},
				#{STORAGE_FILE_NAME},
				#{FILE_SIZE},
				'Admin'
			)
		]]>
	</insert>
	
	<select id="selectFileList" parameterType="hashmap" resultType="hashmap">
		<![CDATA[
			SELECT
			    IDX,
			    ORIGINAL_FILE_NAME,
			    ROUND(FILE_SIZE/1024,1) AS FILE_SIZE
			FROM
			    TB_FILE
			WHERE
			    BOARD_IDX = #{IDX}
			    AND DEL_GB = 'N'
		]]>
	</select>
	
	<update id="deleteFileList" parameterType="hashmap">
		<![CDATA[
			UPDATE TB_FILE SET 
				DEL_GB = 'Y' 
			WHERE 
				BOARD_IDX = #{IDX}	
		]]>
	</update>
	
	<update id="updateFile" parameterType="hashmap">
		<![CDATA[
			UPDATE TB_FILE SET
				DEL_GB = 'N'
			WHERE
				IDX = #{FILE_IDX}	
		]]>
	</update>
</mapper>